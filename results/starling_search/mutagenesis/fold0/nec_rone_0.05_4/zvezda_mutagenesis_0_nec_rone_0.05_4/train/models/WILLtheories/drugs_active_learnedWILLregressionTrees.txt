usePrologVariables: true.

% maxTreeDepthInNodes                 = 4
% maxTreeDepthInLiterals              = 12
% maxNumberOfLiteralsAtAnInteriorNode = 2
% maxFreeBridgersInBody               = 1
% maxNumberOfClauses                  = 12
% maxNodesToConsider                  = 10
% maxNodesToCreate                    = 10,000
% maxAcceptableNodeScoreToStop        = 0.003
% negPosRatio                         = 2.000
% testNegPosRatio                     = -1.000
% # of pos examples                   = 168
% # of neg examples                   = 0



%%%%%  WILL-Produced Tree #1 @ 9:47:51 10/6/20.  [Using 11,196,976 memory cells.]  %%%%%

% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 168.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=112 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree #2 @ 9:47:52 10/6/20.  [Using 11,309,784 memory cells.]  %%%%%

% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 169.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=113 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree #3 @ 9:47:52 10/6/20.  [Using 11,381,504 memory cells.]  %%%%%

% FOR drugs_active(A):
%   return 0;  // std dev = 0.472, 167.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=111 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree #4 @ 9:47:52 10/6/20.  [Using 9,419,224 memory cells.]  %%%%%

% FOR drugs_active(A):
%   return 0;  // std dev = 0.474, 165.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=109 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree #5 @ 9:47:53 10/6/20.  [Using 9,470,288 memory cells.]  %%%%%

% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 168.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=112 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree #6 @ 9:47:53 10/6/20.  [Using 9,521,688 memory cells.]  %%%%%

% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 169.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=113 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree #7 @ 9:47:53 10/6/20.  [Using 9,569,504 memory cells.]  %%%%%

% FOR drugs_active(A):
%   return 0;  // std dev = 0.472, 167.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=111 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree #8 @ 9:47:54 10/6/20.  [Using 9,439,904 memory cells.]  %%%%%

% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 168.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=112 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree #9 @ 9:47:54 10/6/20.  [Using 9,490,744 memory cells.]  %%%%%

% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 168.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=112 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree #10 @ 9:47:54 10/6/20.  [Using 9,536,104 memory cells.]  %%%%%

% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 168.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=112 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree Combined @ 9:47:54 10/6/20.  [Using 9,582,968 memory cells.]  %%%%%

% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 168.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=112 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree #12 @ 9:47:54 10/6/20.  [Using 9,455,496 memory cells.]  %%%%%

% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 168.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=112 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree #13 @ 9:47:55 10/6/20.  [Using 9,502,600 memory cells.]  %%%%%

% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 169.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=113 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree #14 @ 9:47:55 10/6/20.  [Using 9,548,920 memory cells.]  %%%%%

% FOR drugs_active(A):
%   return 0;  // std dev = 0.473, 166.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=110 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree #15 @ 9:47:55 10/6/20.  [Using 9,594,968 memory cells.]  %%%%%

% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 169.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=113 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree #16 @ 9:47:55 10/6/20.  [Using 9,464,736 memory cells.]  %%%%%

% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 168.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=112 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree #17 @ 9:47:55 10/6/20.  [Using 9,510,544 memory cells.]  %%%%%

% FOR drugs_active(A):
%   return 0;  // std dev = 0.472, 167.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=111 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree #18 @ 9:47:56 10/6/20.  [Using 9,575,032 memory cells.]  %%%%%

% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 169.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=113 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree #19 @ 9:47:56 10/6/20.  [Using 9,621,128 memory cells.]  %%%%%

% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 168.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=112 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree #20 @ 9:47:56 10/6/20.  [Using 9,477,304 memory cells.]  %%%%%

% FOR drugs_active(A):
%   return 0;  // std dev = 0.472, 167.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=111 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree #21 @ 9:47:56 10/6/20.  [Using 9,526,776 memory cells.]  %%%%%

% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 168.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=112 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree #22 @ 9:47:57 10/6/20.  [Using 9,573,336 memory cells.]  %%%%%

% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 168.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=112 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree #23 @ 9:47:57 10/6/20.  [Using 9,619,864 memory cells.]  %%%%%

% FOR drugs_active(A):
%   return 0;  // std dev = 0.472, 167.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=111 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree #24 @ 9:47:57 10/6/20.  [Using 9,483,248 memory cells.]  %%%%%

% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 169.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=113 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree #25 @ 9:47:57 10/6/20.  [Using 9,530,440 memory cells.]  %%%%%

% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 168.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=112 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree #26 @ 9:47:58 10/6/20.  [Using 9,603,312 memory cells.]  %%%%%

% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 168.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=112 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree #27 @ 9:47:58 10/6/20.  [Using 9,650,472 memory cells.]  %%%%%

% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 168.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=112 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree #28 @ 9:47:58 10/6/20.  [Using 9,497,104 memory cells.]  %%%%%

% FOR drugs_active(A):
%   return 0;  // std dev = 0.472, 167.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=111 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree #29 @ 9:47:59 10/6/20.  [Using 9,544,560 memory cells.]  %%%%%

% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 168.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=112 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree #30 @ 9:47:59 10/6/20.  [Using 9,592,432 memory cells.]  %%%%%

% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 168.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=112 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree #31 @ 9:47:59 10/6/20.  [Using 9,643,696 memory cells.]  %%%%%

% FOR drugs_active(A):
%   return 0;  // std dev = 0.472, 167.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=111 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree #32 @ 9:48:00 10/6/20.  [Using 9,502,432 memory cells.]  %%%%%

% FOR drugs_active(A):
%   return 0;  // std dev = 0.472, 167.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=111 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree #33 @ 9:48:00 10/6/20.  [Using 9,551,000 memory cells.]  %%%%%

% FOR drugs_active(A):
%   return 0;  // std dev = 0.472, 167.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=111 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree #34 @ 9:48:00 10/6/20.  [Using 9,600,384 memory cells.]  %%%%%

% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 169.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=113 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree #35 @ 9:48:01 10/6/20.  [Using 9,648,696 memory cells.]  %%%%%

% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 169.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=113 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree #36 @ 9:48:01 10/6/20.  [Using 9,510,256 memory cells.]  %%%%%

% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 168.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=112 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree #37 @ 9:48:01 10/6/20.  [Using 9,558,672 memory cells.]  %%%%%

% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 168.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=112 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree #38 @ 9:48:02 10/6/20.  [Using 9,607,208 memory cells.]  %%%%%

% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 168.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=112 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree #39 @ 9:48:02 10/6/20.  [Using 9,695,648 memory cells.]  %%%%%

% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 168.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=112 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree #40 @ 9:48:03 10/6/20.  [Using 9,529,360 memory cells.]  %%%%%

% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 168.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=112 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree #41 @ 9:48:04 10/6/20.  [Using 9,583,176 memory cells.]  %%%%%

% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 168.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=112 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree #42 @ 9:48:05 10/6/20.  [Using 9,632,328 memory cells.]  %%%%%

% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 169.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=113 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree #43 @ 9:48:05 10/6/20.  [Using 9,682,696 memory cells.]  %%%%%

% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 169.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=113 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree #44 @ 9:48:05 10/6/20.  [Using 9,536,568 memory cells.]  %%%%%

% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 168.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=112 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree #45 @ 9:48:06 10/6/20.  [Using 9,586,112 memory cells.]  %%%%%

% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 169.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=113 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree #46 @ 9:48:07 10/6/20.  [Using 9,635,744 memory cells.]  %%%%%

% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 169.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=113 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree #47 @ 9:48:07 10/6/20.  [Using 9,685,288 memory cells.]  %%%%%

% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 168.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=112 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree #48 @ 9:48:07 10/6/20.  [Using 9,541,888 memory cells.]  %%%%%

% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 169.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=113 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree #49 @ 9:48:08 10/6/20.  [Using 9,592,272 memory cells.]  %%%%%

% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 168.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=112 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree #50 @ 9:48:09 10/6/20.  [Using 9,642,416 memory cells.]  %%%%%

% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 169.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=113 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%  Final call for computing score for drugs_active.  %%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

stepLength_tree1(0.05).
stepLength_tree2(0.05).
stepLength_tree3(0.05).
stepLength_tree4(0.05).
stepLength_tree5(0.05).
stepLength_tree6(0.05).
stepLength_tree7(0.05).
stepLength_tree8(0.05).
stepLength_tree9(0.05).
stepLength_tree10(0.05).
stepLength_tree11(0.05).
stepLength_tree12(0.05).
stepLength_tree13(0.05).
stepLength_tree14(0.05).
stepLength_tree15(0.05).
stepLength_tree16(0.05).
stepLength_tree17(0.05).
stepLength_tree18(0.05).
stepLength_tree19(0.05).
stepLength_tree20(0.05).
stepLength_tree21(0.05).
stepLength_tree22(0.05).
stepLength_tree23(0.05).
stepLength_tree24(0.05).
stepLength_tree25(0.05).
stepLength_tree26(0.05).
stepLength_tree27(0.05).
stepLength_tree28(0.05).
stepLength_tree29(0.05).
stepLength_tree30(0.05).
stepLength_tree31(0.05).
stepLength_tree32(0.05).
stepLength_tree33(0.05).
stepLength_tree34(0.05).
stepLength_tree35(0.05).
stepLength_tree36(0.05).
stepLength_tree37(0.05).
stepLength_tree38(0.05).
stepLength_tree39(0.05).
stepLength_tree40(0.05).
stepLength_tree41(0.05).
stepLength_tree42(0.05).
stepLength_tree43(0.05).
stepLength_tree44(0.05).
stepLength_tree45(0.05).
stepLength_tree46(0.05).
stepLength_tree47(0.05).
stepLength_tree48(0.05).
stepLength_tree49(0.05).
stepLength_tree50(0.05).

logPrior(-1.8).
drugs_active(D, Total) :- // A general accessor. 
   drugs_active(D, 1000000, Total), !.
drugs_active(D, Total) :- waitHere("This should not fail", drugs_active(D, Total)).

drugs_active(D, TreesToUse, Total) :- // A tree-limited accessor (e.g., for tuning the number of trees to use).
   logPrior(LogPrior),
   getScore_drugs_active_tree1(D, TreesToUse, Total1),
   getScore_drugs_active_tree2(D, TreesToUse, Total2),
   getScore_drugs_active_tree3(D, TreesToUse, Total3),
   getScore_drugs_active_tree4(D, TreesToUse, Total4),
   getScore_drugs_active_tree5(D, TreesToUse, Total5),
   getScore_drugs_active_tree6(D, TreesToUse, Total6),
   getScore_drugs_active_tree7(D, TreesToUse, Total7),
   getScore_drugs_active_tree8(D, TreesToUse, Total8),
   getScore_drugs_active_tree9(D, TreesToUse, Total9),
   getScore_drugs_active_tree10(D, TreesToUse, Total10),
   getScore_drugs_active_tree11(D, TreesToUse, Total11),
   getScore_drugs_active_tree12(D, TreesToUse, Total12),
   getScore_drugs_active_tree13(D, TreesToUse, Total13),
   getScore_drugs_active_tree14(D, TreesToUse, Total14),
   getScore_drugs_active_tree15(D, TreesToUse, Total15),
   getScore_drugs_active_tree16(D, TreesToUse, Total16),
   getScore_drugs_active_tree17(D, TreesToUse, Total17),
   getScore_drugs_active_tree18(D, TreesToUse, Total18),
   getScore_drugs_active_tree19(D, TreesToUse, Total19),
   getScore_drugs_active_tree20(D, TreesToUse, Total20),
   getScore_drugs_active_tree21(D, TreesToUse, Total21),
   getScore_drugs_active_tree22(D, TreesToUse, Total22),
   getScore_drugs_active_tree23(D, TreesToUse, Total23),
   getScore_drugs_active_tree24(D, TreesToUse, Total24),
   getScore_drugs_active_tree25(D, TreesToUse, Total25),
   getScore_drugs_active_tree26(D, TreesToUse, Total26),
   getScore_drugs_active_tree27(D, TreesToUse, Total27),
   getScore_drugs_active_tree28(D, TreesToUse, Total28),
   getScore_drugs_active_tree29(D, TreesToUse, Total29),
   getScore_drugs_active_tree30(D, TreesToUse, Total30),
   getScore_drugs_active_tree31(D, TreesToUse, Total31),
   getScore_drugs_active_tree32(D, TreesToUse, Total32),
   getScore_drugs_active_tree33(D, TreesToUse, Total33),
   getScore_drugs_active_tree34(D, TreesToUse, Total34),
   getScore_drugs_active_tree35(D, TreesToUse, Total35),
   getScore_drugs_active_tree36(D, TreesToUse, Total36),
   getScore_drugs_active_tree37(D, TreesToUse, Total37),
   getScore_drugs_active_tree38(D, TreesToUse, Total38),
   getScore_drugs_active_tree39(D, TreesToUse, Total39),
   getScore_drugs_active_tree40(D, TreesToUse, Total40),
   getScore_drugs_active_tree41(D, TreesToUse, Total41),
   getScore_drugs_active_tree42(D, TreesToUse, Total42),
   getScore_drugs_active_tree43(D, TreesToUse, Total43),
   getScore_drugs_active_tree44(D, TreesToUse, Total44),
   getScore_drugs_active_tree45(D, TreesToUse, Total45),
   getScore_drugs_active_tree46(D, TreesToUse, Total46),
   getScore_drugs_active_tree47(D, TreesToUse, Total47),
   getScore_drugs_active_tree48(D, TreesToUse, Total48),
   getScore_drugs_active_tree49(D, TreesToUse, Total49),
   getScore_drugs_active_tree50(D, TreesToUse, Total50),
   Total is LogPrior + Total1 + Total2 + Total3 + Total4 + Total5 + Total6 + Total7 + Total8 + Total9 + Total10 + Total11 + Total12 + Total13 + Total14 + Total15 + Total16 + Total17 + Total18 + Total19 + Total20 + Total21 + Total22 + Total23 + Total24 + Total25 + Total26 + Total27 + Total28 + Total29 + Total30 + Total31 + Total32 + Total33 + Total34 + Total35 + Total36 + Total37 + Total38 + Total39 + Total40 + Total41 + Total42 + Total43 + Total44 + Total45 + Total46 + Total47 + Total48 + Total49 + Total50,
   !.
drugs_active(D, TreesToUse, Total) :- waitHere("This should not fail", drugs_active(D, TreesToUse, Total)).

getScore_drugs_active_tree1(D, TreesToUse, 0.0) :- 1 > TreesToUse, !.
getScore_drugs_active_tree1(D, TreesToUse, Total1) :- drugs_active_tree1(D, Total), stepLength_tree1(StepLen), Total1 is Total * StepLen.

getScore_drugs_active_tree2(D, TreesToUse, 0.0) :- 2 > TreesToUse, !.
getScore_drugs_active_tree2(D, TreesToUse, Total2) :- drugs_active_tree2(D, Total), stepLength_tree2(StepLen), Total2 is Total * StepLen.

getScore_drugs_active_tree3(D, TreesToUse, 0.0) :- 3 > TreesToUse, !.
getScore_drugs_active_tree3(D, TreesToUse, Total3) :- drugs_active_tree3(D, Total), stepLength_tree3(StepLen), Total3 is Total * StepLen.

getScore_drugs_active_tree4(D, TreesToUse, 0.0) :- 4 > TreesToUse, !.
getScore_drugs_active_tree4(D, TreesToUse, Total4) :- drugs_active_tree4(D, Total), stepLength_tree4(StepLen), Total4 is Total * StepLen.

getScore_drugs_active_tree5(D, TreesToUse, 0.0) :- 5 > TreesToUse, !.
getScore_drugs_active_tree5(D, TreesToUse, Total5) :- drugs_active_tree5(D, Total), stepLength_tree5(StepLen), Total5 is Total * StepLen.

getScore_drugs_active_tree6(D, TreesToUse, 0.0) :- 6 > TreesToUse, !.
getScore_drugs_active_tree6(D, TreesToUse, Total6) :- drugs_active_tree6(D, Total), stepLength_tree6(StepLen), Total6 is Total * StepLen.

getScore_drugs_active_tree7(D, TreesToUse, 0.0) :- 7 > TreesToUse, !.
getScore_drugs_active_tree7(D, TreesToUse, Total7) :- drugs_active_tree7(D, Total), stepLength_tree7(StepLen), Total7 is Total * StepLen.

getScore_drugs_active_tree8(D, TreesToUse, 0.0) :- 8 > TreesToUse, !.
getScore_drugs_active_tree8(D, TreesToUse, Total8) :- drugs_active_tree8(D, Total), stepLength_tree8(StepLen), Total8 is Total * StepLen.

getScore_drugs_active_tree9(D, TreesToUse, 0.0) :- 9 > TreesToUse, !.
getScore_drugs_active_tree9(D, TreesToUse, Total9) :- drugs_active_tree9(D, Total), stepLength_tree9(StepLen), Total9 is Total * StepLen.

getScore_drugs_active_tree10(D, TreesToUse, 0.0) :- 10 > TreesToUse, !.
getScore_drugs_active_tree10(D, TreesToUse, Total10) :- drugs_active_tree10(D, Total), stepLength_tree10(StepLen), Total10 is Total * StepLen.

getScore_drugs_active_tree11(D, TreesToUse, 0.0) :- 11 > TreesToUse, !.
getScore_drugs_active_tree11(D, TreesToUse, Total11) :- drugs_active_tree11(D, Total), stepLength_tree11(StepLen), Total11 is Total * StepLen.

getScore_drugs_active_tree12(D, TreesToUse, 0.0) :- 12 > TreesToUse, !.
getScore_drugs_active_tree12(D, TreesToUse, Total12) :- drugs_active_tree12(D, Total), stepLength_tree12(StepLen), Total12 is Total * StepLen.

getScore_drugs_active_tree13(D, TreesToUse, 0.0) :- 13 > TreesToUse, !.
getScore_drugs_active_tree13(D, TreesToUse, Total13) :- drugs_active_tree13(D, Total), stepLength_tree13(StepLen), Total13 is Total * StepLen.

getScore_drugs_active_tree14(D, TreesToUse, 0.0) :- 14 > TreesToUse, !.
getScore_drugs_active_tree14(D, TreesToUse, Total14) :- drugs_active_tree14(D, Total), stepLength_tree14(StepLen), Total14 is Total * StepLen.

getScore_drugs_active_tree15(D, TreesToUse, 0.0) :- 15 > TreesToUse, !.
getScore_drugs_active_tree15(D, TreesToUse, Total15) :- drugs_active_tree15(D, Total), stepLength_tree15(StepLen), Total15 is Total * StepLen.

getScore_drugs_active_tree16(D, TreesToUse, 0.0) :- 16 > TreesToUse, !.
getScore_drugs_active_tree16(D, TreesToUse, Total16) :- drugs_active_tree16(D, Total), stepLength_tree16(StepLen), Total16 is Total * StepLen.

getScore_drugs_active_tree17(D, TreesToUse, 0.0) :- 17 > TreesToUse, !.
getScore_drugs_active_tree17(D, TreesToUse, Total17) :- drugs_active_tree17(D, Total), stepLength_tree17(StepLen), Total17 is Total * StepLen.

getScore_drugs_active_tree18(D, TreesToUse, 0.0) :- 18 > TreesToUse, !.
getScore_drugs_active_tree18(D, TreesToUse, Total18) :- drugs_active_tree18(D, Total), stepLength_tree18(StepLen), Total18 is Total * StepLen.

getScore_drugs_active_tree19(D, TreesToUse, 0.0) :- 19 > TreesToUse, !.
getScore_drugs_active_tree19(D, TreesToUse, Total19) :- drugs_active_tree19(D, Total), stepLength_tree19(StepLen), Total19 is Total * StepLen.

getScore_drugs_active_tree20(D, TreesToUse, 0.0) :- 20 > TreesToUse, !.
getScore_drugs_active_tree20(D, TreesToUse, Total20) :- drugs_active_tree20(D, Total), stepLength_tree20(StepLen), Total20 is Total * StepLen.

getScore_drugs_active_tree21(D, TreesToUse, 0.0) :- 21 > TreesToUse, !.
getScore_drugs_active_tree21(D, TreesToUse, Total21) :- drugs_active_tree21(D, Total), stepLength_tree21(StepLen), Total21 is Total * StepLen.

getScore_drugs_active_tree22(D, TreesToUse, 0.0) :- 22 > TreesToUse, !.
getScore_drugs_active_tree22(D, TreesToUse, Total22) :- drugs_active_tree22(D, Total), stepLength_tree22(StepLen), Total22 is Total * StepLen.

getScore_drugs_active_tree23(D, TreesToUse, 0.0) :- 23 > TreesToUse, !.
getScore_drugs_active_tree23(D, TreesToUse, Total23) :- drugs_active_tree23(D, Total), stepLength_tree23(StepLen), Total23 is Total * StepLen.

getScore_drugs_active_tree24(D, TreesToUse, 0.0) :- 24 > TreesToUse, !.
getScore_drugs_active_tree24(D, TreesToUse, Total24) :- drugs_active_tree24(D, Total), stepLength_tree24(StepLen), Total24 is Total * StepLen.

getScore_drugs_active_tree25(D, TreesToUse, 0.0) :- 25 > TreesToUse, !.
getScore_drugs_active_tree25(D, TreesToUse, Total25) :- drugs_active_tree25(D, Total), stepLength_tree25(StepLen), Total25 is Total * StepLen.

getScore_drugs_active_tree26(D, TreesToUse, 0.0) :- 26 > TreesToUse, !.
getScore_drugs_active_tree26(D, TreesToUse, Total26) :- drugs_active_tree26(D, Total), stepLength_tree26(StepLen), Total26 is Total * StepLen.

getScore_drugs_active_tree27(D, TreesToUse, 0.0) :- 27 > TreesToUse, !.
getScore_drugs_active_tree27(D, TreesToUse, Total27) :- drugs_active_tree27(D, Total), stepLength_tree27(StepLen), Total27 is Total * StepLen.

getScore_drugs_active_tree28(D, TreesToUse, 0.0) :- 28 > TreesToUse, !.
getScore_drugs_active_tree28(D, TreesToUse, Total28) :- drugs_active_tree28(D, Total), stepLength_tree28(StepLen), Total28 is Total * StepLen.

getScore_drugs_active_tree29(D, TreesToUse, 0.0) :- 29 > TreesToUse, !.
getScore_drugs_active_tree29(D, TreesToUse, Total29) :- drugs_active_tree29(D, Total), stepLength_tree29(StepLen), Total29 is Total * StepLen.

getScore_drugs_active_tree30(D, TreesToUse, 0.0) :- 30 > TreesToUse, !.
getScore_drugs_active_tree30(D, TreesToUse, Total30) :- drugs_active_tree30(D, Total), stepLength_tree30(StepLen), Total30 is Total * StepLen.

getScore_drugs_active_tree31(D, TreesToUse, 0.0) :- 31 > TreesToUse, !.
getScore_drugs_active_tree31(D, TreesToUse, Total31) :- drugs_active_tree31(D, Total), stepLength_tree31(StepLen), Total31 is Total * StepLen.

getScore_drugs_active_tree32(D, TreesToUse, 0.0) :- 32 > TreesToUse, !.
getScore_drugs_active_tree32(D, TreesToUse, Total32) :- drugs_active_tree32(D, Total), stepLength_tree32(StepLen), Total32 is Total * StepLen.

getScore_drugs_active_tree33(D, TreesToUse, 0.0) :- 33 > TreesToUse, !.
getScore_drugs_active_tree33(D, TreesToUse, Total33) :- drugs_active_tree33(D, Total), stepLength_tree33(StepLen), Total33 is Total * StepLen.

getScore_drugs_active_tree34(D, TreesToUse, 0.0) :- 34 > TreesToUse, !.
getScore_drugs_active_tree34(D, TreesToUse, Total34) :- drugs_active_tree34(D, Total), stepLength_tree34(StepLen), Total34 is Total * StepLen.

getScore_drugs_active_tree35(D, TreesToUse, 0.0) :- 35 > TreesToUse, !.
getScore_drugs_active_tree35(D, TreesToUse, Total35) :- drugs_active_tree35(D, Total), stepLength_tree35(StepLen), Total35 is Total * StepLen.

getScore_drugs_active_tree36(D, TreesToUse, 0.0) :- 36 > TreesToUse, !.
getScore_drugs_active_tree36(D, TreesToUse, Total36) :- drugs_active_tree36(D, Total), stepLength_tree36(StepLen), Total36 is Total * StepLen.

getScore_drugs_active_tree37(D, TreesToUse, 0.0) :- 37 > TreesToUse, !.
getScore_drugs_active_tree37(D, TreesToUse, Total37) :- drugs_active_tree37(D, Total), stepLength_tree37(StepLen), Total37 is Total * StepLen.

getScore_drugs_active_tree38(D, TreesToUse, 0.0) :- 38 > TreesToUse, !.
getScore_drugs_active_tree38(D, TreesToUse, Total38) :- drugs_active_tree38(D, Total), stepLength_tree38(StepLen), Total38 is Total * StepLen.

getScore_drugs_active_tree39(D, TreesToUse, 0.0) :- 39 > TreesToUse, !.
getScore_drugs_active_tree39(D, TreesToUse, Total39) :- drugs_active_tree39(D, Total), stepLength_tree39(StepLen), Total39 is Total * StepLen.

getScore_drugs_active_tree40(D, TreesToUse, 0.0) :- 40 > TreesToUse, !.
getScore_drugs_active_tree40(D, TreesToUse, Total40) :- drugs_active_tree40(D, Total), stepLength_tree40(StepLen), Total40 is Total * StepLen.

getScore_drugs_active_tree41(D, TreesToUse, 0.0) :- 41 > TreesToUse, !.
getScore_drugs_active_tree41(D, TreesToUse, Total41) :- drugs_active_tree41(D, Total), stepLength_tree41(StepLen), Total41 is Total * StepLen.

getScore_drugs_active_tree42(D, TreesToUse, 0.0) :- 42 > TreesToUse, !.
getScore_drugs_active_tree42(D, TreesToUse, Total42) :- drugs_active_tree42(D, Total), stepLength_tree42(StepLen), Total42 is Total * StepLen.

getScore_drugs_active_tree43(D, TreesToUse, 0.0) :- 43 > TreesToUse, !.
getScore_drugs_active_tree43(D, TreesToUse, Total43) :- drugs_active_tree43(D, Total), stepLength_tree43(StepLen), Total43 is Total * StepLen.

getScore_drugs_active_tree44(D, TreesToUse, 0.0) :- 44 > TreesToUse, !.
getScore_drugs_active_tree44(D, TreesToUse, Total44) :- drugs_active_tree44(D, Total), stepLength_tree44(StepLen), Total44 is Total * StepLen.

getScore_drugs_active_tree45(D, TreesToUse, 0.0) :- 45 > TreesToUse, !.
getScore_drugs_active_tree45(D, TreesToUse, Total45) :- drugs_active_tree45(D, Total), stepLength_tree45(StepLen), Total45 is Total * StepLen.

getScore_drugs_active_tree46(D, TreesToUse, 0.0) :- 46 > TreesToUse, !.
getScore_drugs_active_tree46(D, TreesToUse, Total46) :- drugs_active_tree46(D, Total), stepLength_tree46(StepLen), Total46 is Total * StepLen.

getScore_drugs_active_tree47(D, TreesToUse, 0.0) :- 47 > TreesToUse, !.
getScore_drugs_active_tree47(D, TreesToUse, Total47) :- drugs_active_tree47(D, Total), stepLength_tree47(StepLen), Total47 is Total * StepLen.

getScore_drugs_active_tree48(D, TreesToUse, 0.0) :- 48 > TreesToUse, !.
getScore_drugs_active_tree48(D, TreesToUse, Total48) :- drugs_active_tree48(D, Total), stepLength_tree48(StepLen), Total48 is Total * StepLen.

getScore_drugs_active_tree49(D, TreesToUse, 0.0) :- 49 > TreesToUse, !.
getScore_drugs_active_tree49(D, TreesToUse, Total49) :- drugs_active_tree49(D, Total), stepLength_tree49(StepLen), Total49 is Total * StepLen.

getScore_drugs_active_tree50(D, TreesToUse, 0.0) :- 50 > TreesToUse, !.
getScore_drugs_active_tree50(D, TreesToUse, Total50) :- drugs_active_tree50(D, Total), stepLength_tree50(StepLen), Total50 is Total * StepLen.

flattenedLiteralsInThisSetOfTrees(0, []).

%%%%%  WILL-Produced Tree Combined @ 9:48:12 10/6/20.  [Using 9,702,448 memory cells.]  %%%%%

% FOR drugs_active(A):
%   return 0;  // std dev = 23.576, 8,351.000 (wgt'ed) examples reached here.  /* #neg=5,551 #pos=2,800 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=5,551 #pos=2,800 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:
