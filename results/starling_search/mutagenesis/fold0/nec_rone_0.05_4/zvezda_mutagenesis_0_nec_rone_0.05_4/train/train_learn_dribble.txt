% Running on host: vladimirbenzen-VirtualBox

% Switching to VarIndicator = uppercase.

% Unset'ing VarIndicator.

% Calling ILPouterLoop from createRegressionOuterLooper.

% getInputArgWithDefaultValue: args=[train/train_pos.txt, train/train_neg.txt, train/train_bk.txt, train/train_facts.txt]
%  for N=0: args[N]=train/train_pos.txt

% getInputArgWithDefaultValue: args=[train/train_pos.txt, train/train_neg.txt, train/train_bk.txt, train/train_facts.txt]
%  for N=1: args[N]=train/train_neg.txt

% getInputArgWithDefaultValue: args=[train/train_pos.txt, train/train_neg.txt, train/train_bk.txt, train/train_facts.txt]
%  for N=2: args[N]=train/train_bk.txt

% getInputArgWithDefaultValue: args=[train/train_pos.txt, train/train_neg.txt, train/train_bk.txt, train/train_facts.txt]
%  for N=3: args[N]=train/train_facts.txt

% Welcome to the WILL ILP/SRL systems.


% Switching to VarIndicator = uppercase.

% Unset'ing VarIndicator.
% Reading background theory from dir: null
% Load '../background.txt'.

% Switching to VarIndicator = uppercase.

***** Warning: % Since this is the first setting of the notation for variables, will keep:
%   variableIndicator = uppercase *****


***** Warning: % Since this is the first setting of the notation for variables, will keep:
%   variableIndicator = uppercase *****

% [ LazyGroundClauseIndex ]  Building full index for mode/1 with 1 assertions.
% LoadAllModes() called.  Currently loaded modes: []
% [ LazyGroundClauseIndex ]  Building full index for sameAs/2 with 2 assertions.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for exp/3.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for log/3.
% LoadAllLibraries() called.  Currently loaded libraries: [listsInLogic, differentInLogic, modes_arithmeticInLogic, inlines_comparisonInLogic, modes_listsInLogic, inlines_differentInLogic, modes_differentInLogic, arithmeticInLogic, inlines_listsInLogic, modes_comparisonInLogic, comparisonInLogic, inlines_arithmeticInLogic]

%  Read the facts.
%  Have read 32,942 facts.
% Have read 56 examples from 'train' [train/train*].
% Have read 113 examples from 'train' [train/train*].

%  LearnOneClause initialized.

% The outer looper has been created.

% Initializing the ILP inner looper.

% NEW target:                 drugs_active(D)
%  targetPred:                drugs_active/1
%  targetArgTypes:            signature = [const], types = [+drugid]
%  targets:                   [drugs_active(D)]
%  targetPredicates:          [drugs_active/1]
%  targetArgSpecs:            [[D[+drugid]]]
%  variablesInTargets:        [[D]]

% Started collecting constants

% Collecting the types of constants.

%   *** WARNING ***  Constant '2' is already marked as being of types = [drugid];
%          type = 'atomid' may be added if not already known.
%  PredicateName = 'atoms_atom_type', from 'atoms_atom_type(2, 2, numeric1_bin8)',
%  which has types = [signature = [const, const, const], types = [+atomid, -drugid, +numeric1], signature = [const, const, const], types = [+atomid, +drugid, -numeric1], signature = [const, const, const], types = [-atomid, +drugid, +numeric1]]
%   Other warnings with this predicate and this new type are not reported in order to keep this printout small.  Use dontComplainAboutMultipleTypes to override.

%   *** WARNING ***  Constant '3' is already marked as being of types = [atomid];
%          type = 'drugid' may be added if not already known.
%  PredicateName = 'atoms_atom_type', from 'atoms_atom_type(26, 3, numeric1_bin5)',
%  which has types = [signature = [const, const, const], types = [+atomid, -drugid, +numeric1], signature = [const, const, const], types = [+atomid, +drugid, -numeric1], signature = [const, const, const], types = [-atomid, +drugid, +numeric1]]
%   Other warnings with this predicate and this new type are not reported in order to keep this printout small.  Use dontComplainAboutMultipleTypes to override.

%   *** WARNING ***  Constant '7' is already marked as being of types = [atomid, drugid];
%          type = 'nominal3' may be added if not already known.
%  PredicateName = 'bonds_bond_type', from 'bonds_bond_type(0, 2503, 2514, 7)',
%  which has types = [signature = [const, const, const, const], types = [+drugid, -atomid, +atomid, +nominal3], signature = [const, const, const, const], types = [+drugid, +atomid, -atomid, +nominal3], signature = [const, const, const, const], types = [+drugid, +atomid, +atomid, -nominal3], signature = [const, const, const, const], types = [-drugid, +atomid, +atomid, +nominal3]]
%   Other warnings with this predicate and this new type are not reported in order to keep this printout small.  Use dontComplainAboutMultipleTypes to override.

%   *** WARNING ***  Constant '0' is already marked as being of types = [atomid, drugid];
%          type = 'ringid' may be added if not already known.
%  PredicateName = 'ring_atom', from 'ring_atom(0, 2525)',
%  which has types = [signature = [const, const], types = [+ringid, -atomid]]
%   Other warnings with this predicate and this new type are not reported in order to keep this printout small.  Use dontComplainAboutMultipleTypes to override.

%   *** WARNING ***  Constant '0' is already marked as being of types = [atomid, drugid, ringid];
%          type = 'ringstrucid' may be added if not already known.
%  PredicateName = 'ring_strucs_name', from 'ring_strucs_name(0, 0, benzene)',
%  which has types = [signature = [const, const, const], types = [-ringstrucid, +drugid, +nominal4], signature = [const, const, const], types = [+ringstrucid, +drugid, -nominal4]]
%   Other warnings with this predicate and this new type are not reported in order to keep this printout small.  Use dontComplainAboutMultipleTypes to override.

% Looking at the training examples to see if any types of new constants can be inferred.
% Time to collect constants: 902 milliseconds
% Time to collect examples: 0 seconds

% Read 56 pos examples and 113 neg examples.
% Time to init learnOneClause: 1 seconds
% Old dirnull
Setting model dir

% Have 56 'raw' positive examples and kept 56.
% Have 113 'raw' negative examples and kept 113.

% processing backup's for drugs_active
%  POS EX = 56
%  NEG EX = 113

% Memory usage by WILLSetup (just counts # targets?):
%  |backupPosExamples| = 1
%  |backupNegExamples| = 1
%  |predicatesAsFacts| = 0
%  |addedToFactBase|   = 0
train/models/
File: train/advice.txt doesnt exist.Hence no advice loaded
% Learning 50 trees in this iteration for drugs_active

% Learn model for: drugs_active
% Kept 56 of the 56 positive examples.
% Kept 112 of the 113 negative examples.
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.2222222222222222
Set score:0.0025
% Dataset size: 168
Computing probabilities
prob time:2 milliseconds
No hidden examples for : drugs_active
Time to build dataset: 4 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22222222222222254
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 10 positive seeds: 14 15 16 32 42 66 74 92 102 125
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% LearnOneClause Parameters:
%   Targets (1):
%    drugs_active(+drugid)
%  Modes (58):
%    atoms_atom_type(+atomid, -drugid, +numeric1),
%    atoms_atom_type(+atomid, +drugid, -numeric1),
%    atoms_atom_type(-atomid, +drugid, +numeric1),
%    atoms_charge(+atomid, -drugid, +numeric2),
%    atoms_charge(+atomid, +drugid, -numeric2),
%    atoms_charge(-atomid, +drugid, +numeric2),
%    atoms_element(+atomid, -drugid, +nominal2),
%    atoms_element(+atomid, +drugid, -nominal2),
%    atoms_element(-atomid, +drugid, +nominal2),
%    bonds_bond_type(+drugid, -atomid, +atomid, +nominal3),
%    bonds_bond_type(+drugid, +atomid, -atomid, +nominal3),
%    bonds_bond_type(+drugid, +atomid, +atomid, -nominal3),
%    bonds_bond_type(-drugid, +atomid, +atomid, +nominal3),
%    drugs_ind1(+drugid, -numeric4),
%    drugs_inda(+drugid, -numeric5),
%    drugs_logp(+drugid, -numeric6),
%    drugs_lumo(+drugid, -numeric7),
%    ring_atom(+ringid, -atomid),
%    ring_strucs_name(-ringstrucid, +drugid, +nominal4),
%    ring_strucs_name(+ringstrucid, +drugid, -nominal4),
%    rings(+ringid, -ringstrucid),
%    rings(-ringid, +ringstrucid),
%    addList(+willList, #willNumber),
%    multiplyList(+willList, #willNumber),
%    abs(+willNumber, &willNumber),
%    minus(+willNumber, &willNumber),
%    minus(+willNumber, +willNumber, &willNumber),
%    plus(+willNumber, +willNumber, &willNumber),
%    mult(+willNumber, +willNumber, &willNumber),
%    div(+willNumber, +willNumber, &willNumber),
%    allNumbers(+willList),
%    positiveNumber(+willNumber),
%    negativeNumber(+willNumber),
%    in0toDot001(+willNumber),
%    in0toDot01(+willNumber),
%    in0toDot1(+willNumber),
%    in0to1(+willNumber),
%    in0to10(+willNumber),
%    in0to100(+willNumber),
%    in0to1000(+willNumber),
%    equalWithTolerance(+willNumber, +willNumber, &willNumber),
%    greaterOrEqualDifference(+willNumber, +willNumber, &willNumber),
%    smallerOrEqualDifference(+willNumber, +willNumber, &willNumber),
%    isaEqualTolerance(+willNumber),
%    lessThan(+willNumber, +willNumber),
%    greaterThan(+willNumber, +willNumber),
%    lessThanOrEqual(+willNumber, +willNumber),
%    greaterThanOrEqual(+willNumber, +willNumber),
%    inBetweenOO(+willNumber, +willNumber, +willNumber),
%    inBetweenCO(+willNumber, +willNumber, +willNumber),
%    inBetweenOC(+willNumber, +willNumber, +willNumber),
%    inBetweenCC(+willNumber, +willNumber, +willNumber),
%    memberOfList(+willAnything, +willList),
%    firstInList(+willList, &willAnything),
%    restOfList(+willList, &willList),
%    positionInList(+willAnything, +willList, &willNumber),
%    nthInList(+willNumber, +willList, &willAnything),
%    lengthOfList(+willList, &willNumber)

% target           = drugs_active(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
% Most-general root: drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for drugs_ind1/2.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for drugs_inda/2.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for drugs_logp/2.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for drugs_lumo/2.
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #1 @ 9:47:51 10/6/20.  [Using 11,196,976 memory cells.]  %%%%%


% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 168.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=112 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

% Saving model in: train/models/bRDNs/drugs_active.model.ckpt
% Time taken to learn 1 trees is 666 milliseconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22222222222222254
Set score:0.0025
% Only 168 out of 168 converged.
% Kept 56 of the 56 positive examples.
% Kept 113 of the 113 negative examples.
% Dataset size: 169
Computing probabilities
prob time:2 milliseconds
No hidden examples for : drugs_active
Time to build dataset: 39 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22156086971744715
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 8 positive seeds: 27 37 69 79 84 88 95 164
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = drugs_active(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  drugs_active(_).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
% Most-general root: drugs_active(_).  [covers 169.0/169.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'drugs_active(_).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #2 @ 9:47:52 10/6/20.  [Using 11,309,784 memory cells.]  %%%%%


% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 169.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=113 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

% Saving model in: train/models/bRDNs/drugs_active.model.ckpt
% Time taken to learn 2 trees is 989 milliseconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22156086971744715
Set score:0.0025
% Only 169 out of 169 converged.
% Kept 56 of the 56 positive examples.
% Kept 111 of the 113 negative examples.
% Dataset size: 167
Computing probabilities
prob time:1 milliseconds
No hidden examples for : drugs_active
Time to build dataset: 38 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22288357416902752
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 10 positive seeds: 3 24 43 47 49 56 78 94 149 161
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = drugs_active(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  drugs_active(_).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
% Most-general root: drugs_active(_).  [covers 167.0/167.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'drugs_active(_).  [covers 167.0/167.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_inda(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_logp(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_ind1(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_inda(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_logp(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_lumo(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_inda(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_ind1(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_logp(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_lumo(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_logp(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_ind1(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_inda(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_lumo(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_lumo(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_ind1(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_inda(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_logp(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #3 @ 9:47:52 10/6/20.  [Using 11,381,504 memory cells.]  %%%%%


% FOR drugs_active(A):
%   return 0;  // std dev = 0.472, 167.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=111 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

% Saving model in: train/models/bRDNs/drugs_active.model.ckpt
% Time taken to learn 3 trees is 1.354 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22288357416902752
Set score:0.0025
% Only 167 out of 167 converged.
% Kept 56 of the 56 positive examples.
% Kept 109 of the 113 negative examples.
% Dataset size: 165
Computing probabilities
prob time:2 milliseconds
No hidden examples for : drugs_active
Time to build dataset: 11 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22420569329660264
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 10 positive seeds: 1 13 32 36 45 46 54 64 123 127
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = drugs_active(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  drugs_active(_).  [covers 165.0/165.0 pos, 0.0/0.0 neg]
% Most-general root: drugs_active(_).  [covers 165.0/165.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'drugs_active(_).  [covers 165.0/165.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _).  [covers 165.0/165.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_inda(A, _).  [covers 165.0/165.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_logp(A, _).  [covers 165.0/165.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _).  [covers 165.0/165.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_ind1(A, _).  [covers 165.0/165.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_inda(A, _).  [covers 165.0/165.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_logp(A, _).  [covers 165.0/165.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_lumo(A, _).  [covers 165.0/165.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_inda(A, _).  [covers 165.0/165.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_ind1(A, _).  [covers 165.0/165.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_logp(A, _).  [covers 165.0/165.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_lumo(A, _).  [covers 165.0/165.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_logp(A, _).  [covers 165.0/165.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_ind1(A, _).  [covers 165.0/165.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_inda(A, _).  [covers 165.0/165.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_lumo(A, _).  [covers 165.0/165.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_lumo(A, _).  [covers 165.0/165.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_ind1(A, _).  [covers 165.0/165.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_inda(A, _).  [covers 165.0/165.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_logp(A, _).  [covers 165.0/165.0 pos, 0.0/0.0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #4 @ 9:47:52 10/6/20.  [Using 9,419,224 memory cells.]  %%%%%


% FOR drugs_active(A):
%   return 0;  // std dev = 0.474, 165.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=109 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

% Saving model in: train/models/bRDNs/drugs_active.model.ckpt
% Time taken to learn 4 trees is 1.739 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22420569329660264
Set score:0.0025
% Only 165 out of 165 converged.
% Kept 56 of the 56 positive examples.
% Kept 112 of the 113 negative examples.
% Dataset size: 168
Computing probabilities
prob time:1 milliseconds
No hidden examples for : drugs_active
Time to build dataset: 10 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22222222222222254
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 10 positive seeds: 9 20 36 42 45 49 56 84 105 130
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = drugs_active(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
% Most-general root: drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #5 @ 9:47:53 10/6/20.  [Using 9,470,288 memory cells.]  %%%%%


% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 168.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=112 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

% Saving model in: train/models/bRDNs/drugs_active.model.ckpt
% Time taken to learn 5 trees is 2.205 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22222222222222254
Set score:0.0025
% Only 168 out of 168 converged.
% Kept 56 of the 56 positive examples.
% Kept 113 of the 113 negative examples.
% Dataset size: 169
Computing probabilities
prob time:1 milliseconds
No hidden examples for : drugs_active
Time to build dataset: 2 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22156086971744715
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 10 positive seeds: 3 4 13 23 27 35 44 59 75 118
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = drugs_active(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  drugs_active(_).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
% Most-general root: drugs_active(_).  [covers 169.0/169.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'drugs_active(_).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #6 @ 9:47:53 10/6/20.  [Using 9,521,688 memory cells.]  %%%%%


% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 169.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=113 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

% Saving model in: train/models/bRDNs/drugs_active.model.ckpt
% Time taken to learn 6 trees is 2.437 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22156086971744715
Set score:0.0025
% Only 169 out of 169 converged.
% Kept 56 of the 56 positive examples.
% Kept 111 of the 113 negative examples.
% Dataset size: 167
Computing probabilities
prob time:1 milliseconds
No hidden examples for : drugs_active
Time to build dataset: 10 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22288357416902752
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 10 positive seeds: 35 39 54 90 123 125 129 131 134 141
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = drugs_active(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  drugs_active(_).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
% Most-general root: drugs_active(_).  [covers 167.0/167.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'drugs_active(_).  [covers 167.0/167.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_inda(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_logp(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_ind1(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_inda(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_logp(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_lumo(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_inda(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_ind1(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_logp(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_lumo(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_logp(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_ind1(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_inda(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_lumo(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_lumo(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_ind1(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_inda(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_logp(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #7 @ 9:47:53 10/6/20.  [Using 9,569,504 memory cells.]  %%%%%


% FOR drugs_active(A):
%   return 0;  // std dev = 0.472, 167.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=111 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

% Saving model in: train/models/bRDNs/drugs_active.model.ckpt
% Time taken to learn 7 trees is 2.664 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22288357416902752
Set score:0.0025
% Only 167 out of 167 converged.
% Kept 56 of the 56 positive examples.
% Kept 112 of the 113 negative examples.
% Dataset size: 168
Computing probabilities
prob time:0 seconds
No hidden examples for : drugs_active
Time to build dataset: 12 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22222222222222254
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 9 positive seeds: 49 68 73 94 95 118 127 151 163
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = drugs_active(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
% Most-general root: drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #8 @ 9:47:54 10/6/20.  [Using 9,439,904 memory cells.]  %%%%%


% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 168.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=112 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

% Saving model in: train/models/bRDNs/drugs_active.model.ckpt
% Time taken to learn 8 trees is 2.913 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22222222222222254
Set score:0.0025
% Only 168 out of 168 converged.
% Kept 56 of the 56 positive examples.
% Kept 112 of the 113 negative examples.
% Dataset size: 168
Computing probabilities
prob time:0 seconds
No hidden examples for : drugs_active
Time to build dataset: 2 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22222222222222254
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 8 positive seeds: 3 40 62 84 105 112 114 132
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = drugs_active(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
% Most-general root: drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #9 @ 9:47:54 10/6/20.  [Using 9,490,744 memory cells.]  %%%%%


% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 168.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=112 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

% Saving model in: train/models/bRDNs/drugs_active.model.ckpt
% Time taken to learn 9 trees is 3.080 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22222222222222254
Set score:0.0025
% Only 168 out of 168 converged.
% Kept 56 of the 56 positive examples.
% Kept 112 of the 113 negative examples.
% Dataset size: 168
Computing probabilities
prob time:0 seconds
No hidden examples for : drugs_active
Time to build dataset: 2 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22222222222222254
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 10 positive seeds: 4 11 17 25 53 72 82 119 120 127
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = drugs_active(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
% Most-general root: drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #10 @ 9:47:54 10/6/20.  [Using 9,536,104 memory cells.]  %%%%%


% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 168.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=112 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

% Saving model in: train/models/bRDNs/drugs_active.model.ckpt
% Saving model in: train/models/bRDNs/drugs_active.model
% Time taken to learn 10 trees is 3.327 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22222222222222254
Set score:0.0025
% Only 168 out of 168 converged.
% Kept 56 of the 56 positive examples.
% Kept 112 of the 113 negative examples.
% Dataset size: 168
Computing probabilities
prob time:1 milliseconds
No hidden examples for : drugs_active
Time to build dataset: 5 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22222222222222254
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 10 positive seeds: 45 64 67 72 94 122 124 130 133 145
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = drugs_active(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
% Most-general root: drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree Combined @ 9:47:54 10/6/20.  [Using 9,582,968 memory cells.]  %%%%%


% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 168.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=112 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

% Saving model in: train/models/bRDNs/drugs_active.model.ckpt
% Time taken to learn 11 trees is 3.478 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22222222222222254
Set score:0.0025
% Only 168 out of 168 converged.
% Kept 56 of the 56 positive examples.
% Kept 112 of the 113 negative examples.
% Dataset size: 168
Computing probabilities
prob time:0 seconds
No hidden examples for : drugs_active
Time to build dataset: 2 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22222222222222254
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 9 positive seeds: 24 88 97 101 125 144 147 159 164
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = drugs_active(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
% Most-general root: drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #12 @ 9:47:54 10/6/20.  [Using 9,455,496 memory cells.]  %%%%%


% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 168.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=112 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

% Saving model in: train/models/bRDNs/drugs_active.model.ckpt
% Time taken to learn 12 trees is 3.661 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22222222222222254
Set score:0.0025
% Only 168 out of 168 converged.
% Kept 56 of the 56 positive examples.
% Kept 113 of the 113 negative examples.
% Dataset size: 169
Computing probabilities
prob time:1 milliseconds
No hidden examples for : drugs_active
Time to build dataset: 3 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22156086971744715
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 10 positive seeds: 5 102 103 110 111 121 122 139 141 165
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = drugs_active(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  drugs_active(_).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
% Most-general root: drugs_active(_).  [covers 169.0/169.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'drugs_active(_).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #13 @ 9:47:55 10/6/20.  [Using 9,502,600 memory cells.]  %%%%%


% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 169.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=113 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

% Saving model in: train/models/bRDNs/drugs_active.model.ckpt
% Time taken to learn 13 trees is 3.863 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22156086971744715
Set score:0.0025
% Only 169 out of 169 converged.
% Kept 56 of the 56 positive examples.
% Kept 110 of the 113 negative examples.
% Dataset size: 166
Computing probabilities
prob time:2 milliseconds
No hidden examples for : drugs_active
Time to build dataset: 4 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22354478153578197
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 10 positive seeds: 1 5 18 19 60 85 101 120 133 140
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = drugs_active(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  drugs_active(_).  [covers 166.0/166.0 pos, 0.0/0.0 neg]
% Most-general root: drugs_active(_).  [covers 166.0/166.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'drugs_active(_).  [covers 166.0/166.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _).  [covers 166.0/166.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_inda(A, _).  [covers 166.0/166.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_logp(A, _).  [covers 166.0/166.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _).  [covers 166.0/166.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_ind1(A, _).  [covers 166.0/166.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_inda(A, _).  [covers 166.0/166.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_logp(A, _).  [covers 166.0/166.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_lumo(A, _).  [covers 166.0/166.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_inda(A, _).  [covers 166.0/166.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_ind1(A, _).  [covers 166.0/166.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_logp(A, _).  [covers 166.0/166.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_lumo(A, _).  [covers 166.0/166.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_logp(A, _).  [covers 166.0/166.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_ind1(A, _).  [covers 166.0/166.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_inda(A, _).  [covers 166.0/166.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_lumo(A, _).  [covers 166.0/166.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_lumo(A, _).  [covers 166.0/166.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_ind1(A, _).  [covers 166.0/166.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_inda(A, _).  [covers 166.0/166.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_logp(A, _).  [covers 166.0/166.0 pos, 0.0/0.0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #14 @ 9:47:55 10/6/20.  [Using 9,548,920 memory cells.]  %%%%%


% FOR drugs_active(A):
%   return 0;  // std dev = 0.473, 166.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=110 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

% Saving model in: train/models/bRDNs/drugs_active.model.ckpt
% Time taken to learn 14 trees is 4.047 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22354478153578197
Set score:0.0025
% Only 166 out of 166 converged.
% Kept 56 of the 56 positive examples.
% Kept 113 of the 113 negative examples.
% Dataset size: 169
Computing probabilities
prob time:1 milliseconds
No hidden examples for : drugs_active
Time to build dataset: 4 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22156086971744715
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 9 positive seeds: 9 12 24 43 57 95 115 127 133
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = drugs_active(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  drugs_active(_).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
% Most-general root: drugs_active(_).  [covers 169.0/169.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'drugs_active(_).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #15 @ 9:47:55 10/6/20.  [Using 9,594,968 memory cells.]  %%%%%


% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 169.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=113 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

% Saving model in: train/models/bRDNs/drugs_active.model.ckpt
% Time taken to learn 15 trees is 4.231 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22156086971744715
Set score:0.0025
% Only 169 out of 169 converged.
% Kept 56 of the 56 positive examples.
% Kept 112 of the 113 negative examples.
% Dataset size: 168
Computing probabilities
prob time:1 milliseconds
No hidden examples for : drugs_active
Time to build dataset: 3 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22222222222222254
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 10 positive seeds: 3 24 33 54 77 92 98 129 158 163
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = drugs_active(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
% Most-general root: drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #16 @ 9:47:55 10/6/20.  [Using 9,464,736 memory cells.]  %%%%%


% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 168.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=112 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

% Saving model in: train/models/bRDNs/drugs_active.model.ckpt
% Time taken to learn 16 trees is 4.452 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22222222222222254
Set score:0.0025
% Only 168 out of 168 converged.
% Kept 56 of the 56 positive examples.
% Kept 111 of the 113 negative examples.
% Dataset size: 167
Computing probabilities
prob time:2 milliseconds
No hidden examples for : drugs_active
Time to build dataset: 3 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22288357416902752
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 10 positive seeds: 3 5 7 13 28 95 118 123 147 166
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = drugs_active(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  drugs_active(_).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
% Most-general root: drugs_active(_).  [covers 167.0/167.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'drugs_active(_).  [covers 167.0/167.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_inda(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_logp(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_ind1(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_inda(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_logp(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_lumo(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_inda(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_ind1(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_logp(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_lumo(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_logp(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_ind1(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_inda(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_lumo(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_lumo(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_ind1(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_inda(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_logp(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #17 @ 9:47:55 10/6/20.  [Using 9,510,544 memory cells.]  %%%%%


% FOR drugs_active(A):
%   return 0;  // std dev = 0.472, 167.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=111 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

% Saving model in: train/models/bRDNs/drugs_active.model.ckpt
% Time taken to learn 17 trees is 4.636 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22288357416902752
Set score:0.0025
% Only 167 out of 167 converged.
% Kept 56 of the 56 positive examples.
% Kept 113 of the 113 negative examples.
% Dataset size: 169
Computing probabilities
prob time:1 milliseconds
No hidden examples for : drugs_active
Time to build dataset: 4 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22156086971744715
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 10 positive seeds: 9 22 36 41 57 65 69 77 97 101
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = drugs_active(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  drugs_active(_).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
% Most-general root: drugs_active(_).  [covers 169.0/169.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'drugs_active(_).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #18 @ 9:47:56 10/6/20.  [Using 9,575,032 memory cells.]  %%%%%


% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 169.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=113 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

% Saving model in: train/models/bRDNs/drugs_active.model.ckpt
% Time taken to learn 18 trees is 4.821 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22156086971744715
Set score:0.0025
% Only 169 out of 169 converged.
% Kept 56 of the 56 positive examples.
% Kept 112 of the 113 negative examples.
% Dataset size: 168
Computing probabilities
prob time:1 milliseconds
No hidden examples for : drugs_active
Time to build dataset: 3 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22222222222222254
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 7 positive seeds: 1 13 33 99 160 164 167
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = drugs_active(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
% Most-general root: drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #19 @ 9:47:56 10/6/20.  [Using 9,621,128 memory cells.]  %%%%%


% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 168.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=112 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

% Saving model in: train/models/bRDNs/drugs_active.model.ckpt
% Time taken to learn 19 trees is 5.104 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22222222222222254
Set score:0.0025
% Only 168 out of 168 converged.
% Kept 56 of the 56 positive examples.
% Kept 111 of the 113 negative examples.
% Dataset size: 167
Computing probabilities
prob time:2 milliseconds
No hidden examples for : drugs_active
Time to build dataset: 4 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22288357416902752
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 10 positive seeds: 21 22 38 42 56 64 73 78 115 156
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = drugs_active(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  drugs_active(_).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
% Most-general root: drugs_active(_).  [covers 167.0/167.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'drugs_active(_).  [covers 167.0/167.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_inda(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_logp(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_ind1(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_inda(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_logp(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_lumo(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_inda(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_ind1(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_logp(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_lumo(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_logp(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_ind1(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_inda(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_lumo(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_lumo(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_ind1(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_inda(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_logp(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #20 @ 9:47:56 10/6/20.  [Using 9,477,304 memory cells.]  %%%%%


% FOR drugs_active(A):
%   return 0;  // std dev = 0.472, 167.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=111 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

% Saving model in: train/models/bRDNs/drugs_active.model.ckpt
% Saving model in: train/models/bRDNs/drugs_active.model
% Time taken to learn 20 trees is 5.356 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22288357416902752
Set score:0.0025
% Only 167 out of 167 converged.
% Kept 56 of the 56 positive examples.
% Kept 112 of the 113 negative examples.
% Dataset size: 168
Computing probabilities
prob time:1 milliseconds
No hidden examples for : drugs_active
Time to build dataset: 3 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22222222222222254
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 6 positive seeds: 20 44 66 126 140 164
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = drugs_active(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
% Most-general root: drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #21 @ 9:47:56 10/6/20.  [Using 9,526,776 memory cells.]  %%%%%


% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 168.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=112 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

% Saving model in: train/models/bRDNs/drugs_active.model.ckpt
% Time taken to learn 21 trees is 5.728 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22222222222222254
Set score:0.0025
% Only 168 out of 168 converged.
% Kept 56 of the 56 positive examples.
% Kept 112 of the 113 negative examples.
% Dataset size: 168
Computing probabilities
prob time:2 milliseconds
No hidden examples for : drugs_active
Time to build dataset: 5 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22222222222222254
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 10 positive seeds: 1 17 34 53 57 76 78 96 97 104
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = drugs_active(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
% Most-general root: drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #22 @ 9:47:57 10/6/20.  [Using 9,573,336 memory cells.]  %%%%%


% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 168.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=112 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

% Saving model in: train/models/bRDNs/drugs_active.model.ckpt
% Time taken to learn 22 trees is 5.989 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22222222222222254
Set score:0.0025
% Only 168 out of 168 converged.
% Kept 56 of the 56 positive examples.
% Kept 111 of the 113 negative examples.
% Dataset size: 167
Computing probabilities
prob time:2 milliseconds
No hidden examples for : drugs_active
Time to build dataset: 5 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22288357416902752
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 10 positive seeds: 6 27 57 84 91 102 119 123 147 153
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = drugs_active(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  drugs_active(_).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
% Most-general root: drugs_active(_).  [covers 167.0/167.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'drugs_active(_).  [covers 167.0/167.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_inda(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_logp(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_ind1(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_inda(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_logp(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_lumo(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_inda(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_ind1(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_logp(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_lumo(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_logp(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_ind1(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_inda(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_lumo(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_lumo(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_ind1(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_inda(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_logp(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #23 @ 9:47:57 10/6/20.  [Using 9,619,864 memory cells.]  %%%%%


% FOR drugs_active(A):
%   return 0;  // std dev = 0.472, 167.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=111 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

% Saving model in: train/models/bRDNs/drugs_active.model.ckpt
% Time taken to learn 23 trees is 6.342 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22288357416902752
Set score:0.0025
% Only 167 out of 167 converged.
% Kept 56 of the 56 positive examples.
% Kept 113 of the 113 negative examples.
% Dataset size: 169
Computing probabilities
prob time:2 milliseconds
No hidden examples for : drugs_active
Time to build dataset: 4 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22156086971744715
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 10 positive seeds: 26 42 69 84 92 98 130 136 147 163
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = drugs_active(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  drugs_active(_).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
% Most-general root: drugs_active(_).  [covers 169.0/169.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'drugs_active(_).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #24 @ 9:47:57 10/6/20.  [Using 9,483,248 memory cells.]  %%%%%


% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 169.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=113 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

% Saving model in: train/models/bRDNs/drugs_active.model.ckpt
% Time taken to learn 24 trees is 6.584 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22156086971744715
Set score:0.0025
% Only 169 out of 169 converged.
% Kept 56 of the 56 positive examples.
% Kept 112 of the 113 negative examples.
% Dataset size: 168
Computing probabilities
prob time:3 milliseconds
No hidden examples for : drugs_active
Time to build dataset: 6 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22222222222222254
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 10 positive seeds: 15 35 64 84 92 101 126 132 159 161
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = drugs_active(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
% Most-general root: drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #25 @ 9:47:57 10/6/20.  [Using 9,530,440 memory cells.]  %%%%%


% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 168.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=112 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

% Saving model in: train/models/bRDNs/drugs_active.model.ckpt
% Time taken to learn 25 trees is 6.969 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22222222222222254
Set score:0.0025
% Only 168 out of 168 converged.
% Kept 56 of the 56 positive examples.
% Kept 112 of the 113 negative examples.
% Dataset size: 168
Computing probabilities
prob time:3 milliseconds
No hidden examples for : drugs_active
Time to build dataset: 5 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22222222222222254
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 10 positive seeds: 0 12 29 39 58 74 88 91 111 135
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = drugs_active(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
% Most-general root: drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #26 @ 9:47:58 10/6/20.  [Using 9,603,312 memory cells.]  %%%%%


% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 168.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=112 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

% Saving model in: train/models/bRDNs/drugs_active.model.ckpt
% Time taken to learn 26 trees is 7.316 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22222222222222254
Set score:0.0025
% Only 168 out of 168 converged.
% Kept 56 of the 56 positive examples.
% Kept 112 of the 113 negative examples.
% Dataset size: 168
Computing probabilities
prob time:3 milliseconds
No hidden examples for : drugs_active
Time to build dataset: 5 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22222222222222254
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 10 positive seeds: 36 45 60 73 89 128 132 135 139 144
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = drugs_active(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
% Most-general root: drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #27 @ 9:47:58 10/6/20.  [Using 9,650,472 memory cells.]  %%%%%


% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 168.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=112 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

% Saving model in: train/models/bRDNs/drugs_active.model.ckpt
% Time taken to learn 27 trees is 7.597 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22222222222222254
Set score:0.0025
% Only 168 out of 168 converged.
% Kept 56 of the 56 positive examples.
% Kept 111 of the 113 negative examples.
% Dataset size: 167
Computing probabilities
prob time:2 milliseconds
No hidden examples for : drugs_active
Time to build dataset: 4 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22288357416902752
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 8 positive seeds: 1 36 48 51 97 115 119 164
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = drugs_active(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  drugs_active(_).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
% Most-general root: drugs_active(_).  [covers 167.0/167.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'drugs_active(_).  [covers 167.0/167.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_inda(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_logp(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_ind1(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_inda(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_logp(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_lumo(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_inda(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_ind1(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_logp(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_lumo(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_logp(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_ind1(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_inda(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_lumo(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_lumo(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_ind1(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_inda(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_logp(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #28 @ 9:47:58 10/6/20.  [Using 9,497,104 memory cells.]  %%%%%


% FOR drugs_active(A):
%   return 0;  // std dev = 0.472, 167.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=111 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

% Saving model in: train/models/bRDNs/drugs_active.model.ckpt
% Time taken to learn 28 trees is 7.889 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22288357416902752
Set score:0.0025
% Only 167 out of 167 converged.
% Kept 56 of the 56 positive examples.
% Kept 112 of the 113 negative examples.
% Dataset size: 168
Computing probabilities
prob time:3 milliseconds
No hidden examples for : drugs_active
Time to build dataset: 6 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22222222222222254
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 10 positive seeds: 17 42 44 50 52 53 64 65 138 144
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = drugs_active(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
% Most-general root: drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #29 @ 9:47:59 10/6/20.  [Using 9,544,560 memory cells.]  %%%%%


% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 168.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=112 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

% Saving model in: train/models/bRDNs/drugs_active.model.ckpt
% Time taken to learn 29 trees is 8.164 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22222222222222254
Set score:0.0025
% Only 168 out of 168 converged.
% Kept 56 of the 56 positive examples.
% Kept 112 of the 113 negative examples.
% Dataset size: 168
Computing probabilities
prob time:2 milliseconds
No hidden examples for : drugs_active
Time to build dataset: 6 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22222222222222254
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 8 positive seeds: 5 24 43 62 81 91 142 159
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = drugs_active(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
% Most-general root: drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #30 @ 9:47:59 10/6/20.  [Using 9,592,432 memory cells.]  %%%%%


% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 168.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=112 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

% Saving model in: train/models/bRDNs/drugs_active.model.ckpt
% Saving model in: train/models/bRDNs/drugs_active.model
% Time taken to learn 30 trees is 8.538 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22222222222222254
Set score:0.0025
% Only 168 out of 168 converged.
% Kept 56 of the 56 positive examples.
% Kept 111 of the 113 negative examples.
% Dataset size: 167
Computing probabilities
prob time:3 milliseconds
No hidden examples for : drugs_active
Time to build dataset: 5 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22288357416902752
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 10 positive seeds: 3 23 45 48 61 76 78 93 113 119
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = drugs_active(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  drugs_active(_).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
% Most-general root: drugs_active(_).  [covers 167.0/167.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'drugs_active(_).  [covers 167.0/167.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_inda(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_logp(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_ind1(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_inda(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_logp(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_lumo(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_inda(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_ind1(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_logp(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_lumo(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_logp(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_ind1(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_inda(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_lumo(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_lumo(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_ind1(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_inda(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_logp(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #31 @ 9:47:59 10/6/20.  [Using 9,643,696 memory cells.]  %%%%%


% FOR drugs_active(A):
%   return 0;  // std dev = 0.472, 167.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=111 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

% Saving model in: train/models/bRDNs/drugs_active.model.ckpt
% Time taken to learn 31 trees is 8.934 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22288357416902752
Set score:0.0025
% Only 167 out of 167 converged.
% Kept 56 of the 56 positive examples.
% Kept 111 of the 113 negative examples.
% Dataset size: 167
Computing probabilities
prob time:3 milliseconds
No hidden examples for : drugs_active
Time to build dataset: 6 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22288357416902752
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 8 positive seeds: 108 120 125 139 140 142 143 149
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = drugs_active(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  drugs_active(_).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
% Most-general root: drugs_active(_).  [covers 167.0/167.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'drugs_active(_).  [covers 167.0/167.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_inda(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_logp(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_ind1(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_inda(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_logp(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_lumo(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_inda(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_ind1(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_logp(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_lumo(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_logp(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_ind1(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_inda(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_lumo(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_lumo(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_ind1(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_inda(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_logp(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #32 @ 9:48:00 10/6/20.  [Using 9,502,432 memory cells.]  %%%%%


% FOR drugs_active(A):
%   return 0;  // std dev = 0.472, 167.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=111 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

% Saving model in: train/models/bRDNs/drugs_active.model.ckpt
% Time taken to learn 32 trees is 9.267 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22288357416902752
Set score:0.0025
% Only 167 out of 167 converged.
% Kept 56 of the 56 positive examples.
% Kept 111 of the 113 negative examples.
% Dataset size: 167
Computing probabilities
prob time:3 milliseconds
No hidden examples for : drugs_active
Time to build dataset: 8 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22288357416902752
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 10 positive seeds: 12 37 39 40 46 56 78 81 88 104
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = drugs_active(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  drugs_active(_).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
% Most-general root: drugs_active(_).  [covers 167.0/167.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'drugs_active(_).  [covers 167.0/167.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_inda(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_logp(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_ind1(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_inda(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_logp(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_lumo(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_inda(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_ind1(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_logp(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_lumo(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_logp(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_ind1(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_inda(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_lumo(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_lumo(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_ind1(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_inda(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_logp(A, _).  [covers 167.0/167.0 pos, 0.0/0.0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #33 @ 9:48:00 10/6/20.  [Using 9,551,000 memory cells.]  %%%%%


% FOR drugs_active(A):
%   return 0;  // std dev = 0.472, 167.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=111 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

% Saving model in: train/models/bRDNs/drugs_active.model.ckpt
% Time taken to learn 33 trees is 9.530 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22288357416902752
Set score:0.0025
% Only 167 out of 167 converged.
% Kept 56 of the 56 positive examples.
% Kept 113 of the 113 negative examples.
% Dataset size: 169
Computing probabilities
prob time:3 milliseconds
No hidden examples for : drugs_active
Time to build dataset: 21 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22156086971744715
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 9 positive seeds: 0 65 77 95 96 133 150 156 164
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = drugs_active(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  drugs_active(_).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
% Most-general root: drugs_active(_).  [covers 169.0/169.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'drugs_active(_).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #34 @ 9:48:00 10/6/20.  [Using 9,600,384 memory cells.]  %%%%%


% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 169.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=113 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

% Saving model in: train/models/bRDNs/drugs_active.model.ckpt
% Time taken to learn 34 trees is 9.807 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22156086971744715
Set score:0.0025
% Only 169 out of 169 converged.
% Kept 56 of the 56 positive examples.
% Kept 113 of the 113 negative examples.
% Dataset size: 169
Computing probabilities
prob time:2 milliseconds
No hidden examples for : drugs_active
Time to build dataset: 5 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22156086971744715
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 9 positive seeds: 5 44 52 82 90 125 141 157 165
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = drugs_active(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  drugs_active(_).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
% Most-general root: drugs_active(_).  [covers 169.0/169.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'drugs_active(_).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #35 @ 9:48:01 10/6/20.  [Using 9,648,696 memory cells.]  %%%%%


% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 169.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=113 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

% Saving model in: train/models/bRDNs/drugs_active.model.ckpt
% Time taken to learn 35 trees is 10.087 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22156086971744715
Set score:0.0025
% Only 169 out of 169 converged.
% Kept 56 of the 56 positive examples.
% Kept 112 of the 113 negative examples.
% Dataset size: 168
Computing probabilities
prob time:4 milliseconds
No hidden examples for : drugs_active
Time to build dataset: 8 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22222222222222254
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 10 positive seeds: 3 9 24 40 58 80 83 96 103 113
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = drugs_active(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
% Most-general root: drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #36 @ 9:48:01 10/6/20.  [Using 9,510,256 memory cells.]  %%%%%


% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 168.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=112 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

% Saving model in: train/models/bRDNs/drugs_active.model.ckpt
% Time taken to learn 36 trees is 10.571 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22222222222222254
Set score:0.0025
% Only 168 out of 168 converged.
% Kept 56 of the 56 positive examples.
% Kept 112 of the 113 negative examples.
% Dataset size: 168
Computing probabilities
prob time:4 milliseconds
No hidden examples for : drugs_active
Time to build dataset: 7 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22222222222222254
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 10 positive seeds: 9 10 49 53 57 91 95 100 134 137
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = drugs_active(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
% Most-general root: drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #37 @ 9:48:01 10/6/20.  [Using 9,558,672 memory cells.]  %%%%%


% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 168.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=112 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

% Saving model in: train/models/bRDNs/drugs_active.model.ckpt
% Time taken to learn 37 trees is 10.930 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22222222222222254
Set score:0.0025
% Only 168 out of 168 converged.
% Kept 56 of the 56 positive examples.
% Kept 112 of the 113 negative examples.
% Dataset size: 168
Computing probabilities
prob time:4 milliseconds
No hidden examples for : drugs_active
Time to build dataset: 6 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22222222222222254
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 10 positive seeds: 22 36 37 41 73 84 103 122 126 130
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = drugs_active(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
% Most-general root: drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #38 @ 9:48:02 10/6/20.  [Using 9,607,208 memory cells.]  %%%%%


% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 168.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=112 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

% Saving model in: train/models/bRDNs/drugs_active.model.ckpt
% Time taken to learn 38 trees is 11.336 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22222222222222254
Set score:0.0025
% Only 168 out of 168 converged.
% Kept 56 of the 56 positive examples.
% Kept 112 of the 113 negative examples.
% Dataset size: 168
Computing probabilities
prob time:3 milliseconds
No hidden examples for : drugs_active
Time to build dataset: 5 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22222222222222254
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 10 positive seeds: 2 4 10 17 19 26 35 75 78 85
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = drugs_active(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
% Most-general root: drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #39 @ 9:48:02 10/6/20.  [Using 9,695,648 memory cells.]  %%%%%


% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 168.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=112 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

% Saving model in: train/models/bRDNs/drugs_active.model.ckpt
% Time taken to learn 39 trees is 11.665 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22222222222222254
Set score:0.0025
% Only 168 out of 168 converged.
% Kept 56 of the 56 positive examples.
% Kept 112 of the 113 negative examples.
% Dataset size: 168
Computing probabilities
prob time:4 milliseconds
No hidden examples for : drugs_active
Time to build dataset: 7 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22222222222222254
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 10 positive seeds: 7 11 12 18 26 40 43 56 77 80
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = drugs_active(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
% Most-general root: drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #40 @ 9:48:03 10/6/20.  [Using 9,529,360 memory cells.]  %%%%%


% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 168.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=112 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

% Saving model in: train/models/bRDNs/drugs_active.model.ckpt
% Saving model in: train/models/bRDNs/drugs_active.model
% Time taken to learn 40 trees is 12.938 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22222222222222254
Set score:0.0025
% Only 168 out of 168 converged.
% Kept 56 of the 56 positive examples.
% Kept 112 of the 113 negative examples.
% Dataset size: 168
Computing probabilities
prob time:4 milliseconds
No hidden examples for : drugs_active
Time to build dataset: 14 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22222222222222254
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 10 positive seeds: 8 58 62 86 87 93 99 101 127 129
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = drugs_active(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
% Most-general root: drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #41 @ 9:48:04 10/6/20.  [Using 9,583,176 memory cells.]  %%%%%


% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 168.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=112 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

% Saving model in: train/models/bRDNs/drugs_active.model.ckpt
% Time taken to learn 41 trees is 13.681 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22222222222222254
Set score:0.0025
% Only 168 out of 168 converged.
% Kept 56 of the 56 positive examples.
% Kept 113 of the 113 negative examples.
% Dataset size: 169
Computing probabilities
prob time:5 milliseconds
No hidden examples for : drugs_active
Time to build dataset: 7 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22156086971744715
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 9 positive seeds: 21 37 65 73 79 118 134 149 162
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = drugs_active(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  drugs_active(_).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
% Most-general root: drugs_active(_).  [covers 169.0/169.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'drugs_active(_).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #42 @ 9:48:05 10/6/20.  [Using 9,632,328 memory cells.]  %%%%%


% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 169.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=113 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

% Saving model in: train/models/bRDNs/drugs_active.model.ckpt
% Time taken to learn 42 trees is 14.014 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22156086971744715
Set score:0.0025
% Only 169 out of 169 converged.
% Kept 56 of the 56 positive examples.
% Kept 113 of the 113 negative examples.
% Dataset size: 169
Computing probabilities
prob time:5 milliseconds
No hidden examples for : drugs_active
Time to build dataset: 8 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22156086971744715
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 10 positive seeds: 0 8 35 50 74 75 77 86 94 102
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = drugs_active(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  drugs_active(_).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
% Most-general root: drugs_active(_).  [covers 169.0/169.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'drugs_active(_).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #43 @ 9:48:05 10/6/20.  [Using 9,682,696 memory cells.]  %%%%%


% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 169.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=113 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

% Saving model in: train/models/bRDNs/drugs_active.model.ckpt
% Time taken to learn 43 trees is 14.379 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22156086971744715
Set score:0.0025
% Only 169 out of 169 converged.
% Kept 56 of the 56 positive examples.
% Kept 112 of the 113 negative examples.
% Dataset size: 168
Computing probabilities
prob time:4 milliseconds
No hidden examples for : drugs_active
Time to build dataset: 7 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22222222222222254
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 10 positive seeds: 7 11 36 41 47 57 68 89 106 115
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = drugs_active(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
% Most-general root: drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #44 @ 9:48:05 10/6/20.  [Using 9,536,568 memory cells.]  %%%%%


% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 168.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=112 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

% Saving model in: train/models/bRDNs/drugs_active.model.ckpt
% Time taken to learn 44 trees is 15.128 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22222222222222254
Set score:0.0025
% Only 168 out of 168 converged.
% Kept 56 of the 56 positive examples.
% Kept 113 of the 113 negative examples.
% Dataset size: 169
Computing probabilities
prob time:9 milliseconds
No hidden examples for : drugs_active
Time to build dataset: 16 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22156086971744715
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 10 positive seeds: 26 36 50 60 83 84 90 96 99 105
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = drugs_active(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  drugs_active(_).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
% Most-general root: drugs_active(_).  [covers 169.0/169.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'drugs_active(_).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #45 @ 9:48:06 10/6/20.  [Using 9,586,112 memory cells.]  %%%%%


% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 169.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=113 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

% Saving model in: train/models/bRDNs/drugs_active.model.ckpt
% Time taken to learn 45 trees is 15.879 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22156086971744715
Set score:0.0025
% Only 169 out of 169 converged.
% Kept 56 of the 56 positive examples.
% Kept 113 of the 113 negative examples.
% Dataset size: 169
Computing probabilities
prob time:3 milliseconds
No hidden examples for : drugs_active
Time to build dataset: 5 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22156086971744715
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 9 positive seeds: 18 37 54 73 101 108 116 123 124
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = drugs_active(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  drugs_active(_).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
% Most-general root: drugs_active(_).  [covers 169.0/169.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'drugs_active(_).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #46 @ 9:48:07 10/6/20.  [Using 9,635,744 memory cells.]  %%%%%


% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 169.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=113 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

% Saving model in: train/models/bRDNs/drugs_active.model.ckpt
% Time taken to learn 46 trees is 16.259 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22156086971744715
Set score:0.0025
% Only 169 out of 169 converged.
% Kept 56 of the 56 positive examples.
% Kept 112 of the 113 negative examples.
% Dataset size: 168
Computing probabilities
prob time:5 milliseconds
No hidden examples for : drugs_active
Time to build dataset: 8 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22222222222222254
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 8 positive seeds: 38 62 80 91 102 113 115 148
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = drugs_active(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
% Most-general root: drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #47 @ 9:48:07 10/6/20.  [Using 9,685,288 memory cells.]  %%%%%


% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 168.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=112 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

% Saving model in: train/models/bRDNs/drugs_active.model.ckpt
% Time taken to learn 47 trees is 16.578 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22222222222222254
Set score:0.0025
% Only 168 out of 168 converged.
% Kept 56 of the 56 positive examples.
% Kept 113 of the 113 negative examples.
% Dataset size: 169
Computing probabilities
prob time:4 milliseconds
No hidden examples for : drugs_active
Time to build dataset: 7 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22156086971744715
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 10 positive seeds: 15 16 26 41 44 78 81 84 124 138
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = drugs_active(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  drugs_active(_).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
% Most-general root: drugs_active(_).  [covers 169.0/169.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'drugs_active(_).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #48 @ 9:48:07 10/6/20.  [Using 9,541,888 memory cells.]  %%%%%


% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 169.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=113 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

% Saving model in: train/models/bRDNs/drugs_active.model.ckpt
% Time taken to learn 48 trees is 17.303 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22156086971744715
Set score:0.0025
% Only 169 out of 169 converged.
% Kept 56 of the 56 positive examples.
% Kept 112 of the 113 negative examples.
% Dataset size: 168
Computing probabilities
prob time:11 milliseconds
No hidden examples for : drugs_active
Time to build dataset: 21 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22222222222222254
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 10 positive seeds: 32 36 42 69 74 77 100 110 133 139
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = drugs_active(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
% Most-general root: drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'drugs_active(_).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_lumo(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_ind1(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_inda(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_logp(A, _).  [covers 168.0/168.0 pos, 0.0/0.0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #49 @ 9:48:08 10/6/20.  [Using 9,592,272 memory cells.]  %%%%%


% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 168.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=112 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

% Saving model in: train/models/bRDNs/drugs_active.model.ckpt
% Time taken to learn 49 trees is 18.220 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22222222222222254
Set score:0.0025
% Only 168 out of 168 converged.
% Kept 56 of the 56 positive examples.
% Kept 113 of the 113 negative examples.
% Dataset size: 169
Computing probabilities
prob time:9 milliseconds
No hidden examples for : drugs_active
Time to build dataset: 17 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22156086971744715
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 10 positive seeds: 14 51 53 62 64 66 91 108 117 164
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = drugs_active(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  drugs_active(_).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
% Most-general root: drugs_active(_).  [covers 169.0/169.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'drugs_active(_).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_lumo(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_ind1(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_inda(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_logp(A, _).  [covers 169.0/169.0 pos, 0.0/0.0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #50 @ 9:48:09 10/6/20.  [Using 9,642,416 memory cells.]  %%%%%


% FOR drugs_active(A):
%   return 0;  // std dev = 0.471, 169.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=56 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=113 #pos=56 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

% Saving model in: train/models/bRDNs/drugs_active.model.ckpt
% Saving model in: train/models/bRDNs/drugs_active.model


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%  Final call for computing score for drugs_active.  %%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

stepLength_tree1(0.05).
stepLength_tree2(0.05).
stepLength_tree3(0.05).
stepLength_tree4(0.05).
stepLength_tree5(0.05).
stepLength_tree6(0.05).
stepLength_tree7(0.05).
stepLength_tree8(0.05).
stepLength_tree9(0.05).
stepLength_tree10(0.05).
stepLength_tree11(0.05).
stepLength_tree12(0.05).
stepLength_tree13(0.05).
stepLength_tree14(0.05).
stepLength_tree15(0.05).
stepLength_tree16(0.05).
stepLength_tree17(0.05).
stepLength_tree18(0.05).
stepLength_tree19(0.05).
stepLength_tree20(0.05).
stepLength_tree21(0.05).
stepLength_tree22(0.05).
stepLength_tree23(0.05).
stepLength_tree24(0.05).
stepLength_tree25(0.05).
stepLength_tree26(0.05).
stepLength_tree27(0.05).
stepLength_tree28(0.05).
stepLength_tree29(0.05).
stepLength_tree30(0.05).
stepLength_tree31(0.05).
stepLength_tree32(0.05).
stepLength_tree33(0.05).
stepLength_tree34(0.05).
stepLength_tree35(0.05).
stepLength_tree36(0.05).
stepLength_tree37(0.05).
stepLength_tree38(0.05).
stepLength_tree39(0.05).
stepLength_tree40(0.05).
stepLength_tree41(0.05).
stepLength_tree42(0.05).
stepLength_tree43(0.05).
stepLength_tree44(0.05).
stepLength_tree45(0.05).
stepLength_tree46(0.05).
stepLength_tree47(0.05).
stepLength_tree48(0.05).
stepLength_tree49(0.05).
stepLength_tree50(0.05).

logPrior(-1.8).
drugs_active(D, Total) :- // A general accessor. 
   drugs_active(D, 1000000, Total), !.
drugs_active(D, Total) :- waitHere("This should not fail", drugs_active(D, Total)).

drugs_active(D, TreesToUse, Total) :- // A tree-limited accessor (e.g., for tuning the number of trees to use).
   logPrior(LogPrior),
   getScore_drugs_active_tree1(D, TreesToUse, Total1),
   getScore_drugs_active_tree2(D, TreesToUse, Total2),
   getScore_drugs_active_tree3(D, TreesToUse, Total3),
   getScore_drugs_active_tree4(D, TreesToUse, Total4),
   getScore_drugs_active_tree5(D, TreesToUse, Total5),
   getScore_drugs_active_tree6(D, TreesToUse, Total6),
   getScore_drugs_active_tree7(D, TreesToUse, Total7),
   getScore_drugs_active_tree8(D, TreesToUse, Total8),
   getScore_drugs_active_tree9(D, TreesToUse, Total9),
   getScore_drugs_active_tree10(D, TreesToUse, Total10),
   getScore_drugs_active_tree11(D, TreesToUse, Total11),
   getScore_drugs_active_tree12(D, TreesToUse, Total12),
   getScore_drugs_active_tree13(D, TreesToUse, Total13),
   getScore_drugs_active_tree14(D, TreesToUse, Total14),
   getScore_drugs_active_tree15(D, TreesToUse, Total15),
   getScore_drugs_active_tree16(D, TreesToUse, Total16),
   getScore_drugs_active_tree17(D, TreesToUse, Total17),
   getScore_drugs_active_tree18(D, TreesToUse, Total18),
   getScore_drugs_active_tree19(D, TreesToUse, Total19),
   getScore_drugs_active_tree20(D, TreesToUse, Total20),
   getScore_drugs_active_tree21(D, TreesToUse, Total21),
   getScore_drugs_active_tree22(D, TreesToUse, Total22),
   getScore_drugs_active_tree23(D, TreesToUse, Total23),
   getScore_drugs_active_tree24(D, TreesToUse, Total24),
   getScore_drugs_active_tree25(D, TreesToUse, Total25),
   getScore_drugs_active_tree26(D, TreesToUse, Total26),
   getScore_drugs_active_tree27(D, TreesToUse, Total27),
   getScore_drugs_active_tree28(D, TreesToUse, Total28),
   getScore_drugs_active_tree29(D, TreesToUse, Total29),
   getScore_drugs_active_tree30(D, TreesToUse, Total30),
   getScore_drugs_active_tree31(D, TreesToUse, Total31),
   getScore_drugs_active_tree32(D, TreesToUse, Total32),
   getScore_drugs_active_tree33(D, TreesToUse, Total33),
   getScore_drugs_active_tree34(D, TreesToUse, Total34),
   getScore_drugs_active_tree35(D, TreesToUse, Total35),
   getScore_drugs_active_tree36(D, TreesToUse, Total36),
   getScore_drugs_active_tree37(D, TreesToUse, Total37),
   getScore_drugs_active_tree38(D, TreesToUse, Total38),
   getScore_drugs_active_tree39(D, TreesToUse, Total39),
   getScore_drugs_active_tree40(D, TreesToUse, Total40),
   getScore_drugs_active_tree41(D, TreesToUse, Total41),
   getScore_drugs_active_tree42(D, TreesToUse, Total42),
   getScore_drugs_active_tree43(D, TreesToUse, Total43),
   getScore_drugs_active_tree44(D, TreesToUse, Total44),
   getScore_drugs_active_tree45(D, TreesToUse, Total45),
   getScore_drugs_active_tree46(D, TreesToUse, Total46),
   getScore_drugs_active_tree47(D, TreesToUse, Total47),
   getScore_drugs_active_tree48(D, TreesToUse, Total48),
   getScore_drugs_active_tree49(D, TreesToUse, Total49),
   getScore_drugs_active_tree50(D, TreesToUse, Total50),
   Total is LogPrior + Total1 + Total2 + Total3 + Total4 + Total5 + Total6 + Total7 + Total8 + Total9 + Total10 + Total11 + Total12 + Total13 + Total14 + Total15 + Total16 + Total17 + Total18 + Total19 + Total20 + Total21 + Total22 + Total23 + Total24 + Total25 + Total26 + Total27 + Total28 + Total29 + Total30 + Total31 + Total32 + Total33 + Total34 + Total35 + Total36 + Total37 + Total38 + Total39 + Total40 + Total41 + Total42 + Total43 + Total44 + Total45 + Total46 + Total47 + Total48 + Total49 + Total50,
   !.
drugs_active(D, TreesToUse, Total) :- waitHere("This should not fail", drugs_active(D, TreesToUse, Total)).

getScore_drugs_active_tree1(D, TreesToUse, 0.0) :- 1 > TreesToUse, !.
getScore_drugs_active_tree1(D, TreesToUse, Total1) :- drugs_active_tree1(D, Total), stepLength_tree1(StepLen), Total1 is Total * StepLen.

getScore_drugs_active_tree2(D, TreesToUse, 0.0) :- 2 > TreesToUse, !.
getScore_drugs_active_tree2(D, TreesToUse, Total2) :- drugs_active_tree2(D, Total), stepLength_tree2(StepLen), Total2 is Total * StepLen.

getScore_drugs_active_tree3(D, TreesToUse, 0.0) :- 3 > TreesToUse, !.
getScore_drugs_active_tree3(D, TreesToUse, Total3) :- drugs_active_tree3(D, Total), stepLength_tree3(StepLen), Total3 is Total * StepLen.

getScore_drugs_active_tree4(D, TreesToUse, 0.0) :- 4 > TreesToUse, !.
getScore_drugs_active_tree4(D, TreesToUse, Total4) :- drugs_active_tree4(D, Total), stepLength_tree4(StepLen), Total4 is Total * StepLen.

getScore_drugs_active_tree5(D, TreesToUse, 0.0) :- 5 > TreesToUse, !.
getScore_drugs_active_tree5(D, TreesToUse, Total5) :- drugs_active_tree5(D, Total), stepLength_tree5(StepLen), Total5 is Total * StepLen.

getScore_drugs_active_tree6(D, TreesToUse, 0.0) :- 6 > TreesToUse, !.
getScore_drugs_active_tree6(D, TreesToUse, Total6) :- drugs_active_tree6(D, Total), stepLength_tree6(StepLen), Total6 is Total * StepLen.

getScore_drugs_active_tree7(D, TreesToUse, 0.0) :- 7 > TreesToUse, !.
getScore_drugs_active_tree7(D, TreesToUse, Total7) :- drugs_active_tree7(D, Total), stepLength_tree7(StepLen), Total7 is Total * StepLen.

getScore_drugs_active_tree8(D, TreesToUse, 0.0) :- 8 > TreesToUse, !.
getScore_drugs_active_tree8(D, TreesToUse, Total8) :- drugs_active_tree8(D, Total), stepLength_tree8(StepLen), Total8 is Total * StepLen.

getScore_drugs_active_tree9(D, TreesToUse, 0.0) :- 9 > TreesToUse, !.
getScore_drugs_active_tree9(D, TreesToUse, Total9) :- drugs_active_tree9(D, Total), stepLength_tree9(StepLen), Total9 is Total * StepLen.

getScore_drugs_active_tree10(D, TreesToUse, 0.0) :- 10 > TreesToUse, !.
getScore_drugs_active_tree10(D, TreesToUse, Total10) :- drugs_active_tree10(D, Total), stepLength_tree10(StepLen), Total10 is Total * StepLen.

getScore_drugs_active_tree11(D, TreesToUse, 0.0) :- 11 > TreesToUse, !.
getScore_drugs_active_tree11(D, TreesToUse, Total11) :- drugs_active_tree11(D, Total), stepLength_tree11(StepLen), Total11 is Total * StepLen.

getScore_drugs_active_tree12(D, TreesToUse, 0.0) :- 12 > TreesToUse, !.
getScore_drugs_active_tree12(D, TreesToUse, Total12) :- drugs_active_tree12(D, Total), stepLength_tree12(StepLen), Total12 is Total * StepLen.

getScore_drugs_active_tree13(D, TreesToUse, 0.0) :- 13 > TreesToUse, !.
getScore_drugs_active_tree13(D, TreesToUse, Total13) :- drugs_active_tree13(D, Total), stepLength_tree13(StepLen), Total13 is Total * StepLen.

getScore_drugs_active_tree14(D, TreesToUse, 0.0) :- 14 > TreesToUse, !.
getScore_drugs_active_tree14(D, TreesToUse, Total14) :- drugs_active_tree14(D, Total), stepLength_tree14(StepLen), Total14 is Total * StepLen.

getScore_drugs_active_tree15(D, TreesToUse, 0.0) :- 15 > TreesToUse, !.
getScore_drugs_active_tree15(D, TreesToUse, Total15) :- drugs_active_tree15(D, Total), stepLength_tree15(StepLen), Total15 is Total * StepLen.

getScore_drugs_active_tree16(D, TreesToUse, 0.0) :- 16 > TreesToUse, !.
getScore_drugs_active_tree16(D, TreesToUse, Total16) :- drugs_active_tree16(D, Total), stepLength_tree16(StepLen), Total16 is Total * StepLen.

getScore_drugs_active_tree17(D, TreesToUse, 0.0) :- 17 > TreesToUse, !.
getScore_drugs_active_tree17(D, TreesToUse, Total17) :- drugs_active_tree17(D, Total), stepLength_tree17(StepLen), Total17 is Total * StepLen.

getScore_drugs_active_tree18(D, TreesToUse, 0.0) :- 18 > TreesToUse, !.
getScore_drugs_active_tree18(D, TreesToUse, Total18) :- drugs_active_tree18(D, Total), stepLength_tree18(StepLen), Total18 is Total * StepLen.

getScore_drugs_active_tree19(D, TreesToUse, 0.0) :- 19 > TreesToUse, !.
getScore_drugs_active_tree19(D, TreesToUse, Total19) :- drugs_active_tree19(D, Total), stepLength_tree19(StepLen), Total19 is Total * StepLen.

getScore_drugs_active_tree20(D, TreesToUse, 0.0) :- 20 > TreesToUse, !.
getScore_drugs_active_tree20(D, TreesToUse, Total20) :- drugs_active_tree20(D, Total), stepLength_tree20(StepLen), Total20 is Total * StepLen.

getScore_drugs_active_tree21(D, TreesToUse, 0.0) :- 21 > TreesToUse, !.
getScore_drugs_active_tree21(D, TreesToUse, Total21) :- drugs_active_tree21(D, Total), stepLength_tree21(StepLen), Total21 is Total * StepLen.

getScore_drugs_active_tree22(D, TreesToUse, 0.0) :- 22 > TreesToUse, !.
getScore_drugs_active_tree22(D, TreesToUse, Total22) :- drugs_active_tree22(D, Total), stepLength_tree22(StepLen), Total22 is Total * StepLen.

getScore_drugs_active_tree23(D, TreesToUse, 0.0) :- 23 > TreesToUse, !.
getScore_drugs_active_tree23(D, TreesToUse, Total23) :- drugs_active_tree23(D, Total), stepLength_tree23(StepLen), Total23 is Total * StepLen.

getScore_drugs_active_tree24(D, TreesToUse, 0.0) :- 24 > TreesToUse, !.
getScore_drugs_active_tree24(D, TreesToUse, Total24) :- drugs_active_tree24(D, Total), stepLength_tree24(StepLen), Total24 is Total * StepLen.

getScore_drugs_active_tree25(D, TreesToUse, 0.0) :- 25 > TreesToUse, !.
getScore_drugs_active_tree25(D, TreesToUse, Total25) :- drugs_active_tree25(D, Total), stepLength_tree25(StepLen), Total25 is Total * StepLen.

getScore_drugs_active_tree26(D, TreesToUse, 0.0) :- 26 > TreesToUse, !.
getScore_drugs_active_tree26(D, TreesToUse, Total26) :- drugs_active_tree26(D, Total), stepLength_tree26(StepLen), Total26 is Total * StepLen.

getScore_drugs_active_tree27(D, TreesToUse, 0.0) :- 27 > TreesToUse, !.
getScore_drugs_active_tree27(D, TreesToUse, Total27) :- drugs_active_tree27(D, Total), stepLength_tree27(StepLen), Total27 is Total * StepLen.

getScore_drugs_active_tree28(D, TreesToUse, 0.0) :- 28 > TreesToUse, !.
getScore_drugs_active_tree28(D, TreesToUse, Total28) :- drugs_active_tree28(D, Total), stepLength_tree28(StepLen), Total28 is Total * StepLen.

getScore_drugs_active_tree29(D, TreesToUse, 0.0) :- 29 > TreesToUse, !.
getScore_drugs_active_tree29(D, TreesToUse, Total29) :- drugs_active_tree29(D, Total), stepLength_tree29(StepLen), Total29 is Total * StepLen.

getScore_drugs_active_tree30(D, TreesToUse, 0.0) :- 30 > TreesToUse, !.
getScore_drugs_active_tree30(D, TreesToUse, Total30) :- drugs_active_tree30(D, Total), stepLength_tree30(StepLen), Total30 is Total * StepLen.

getScore_drugs_active_tree31(D, TreesToUse, 0.0) :- 31 > TreesToUse, !.
getScore_drugs_active_tree31(D, TreesToUse, Total31) :- drugs_active_tree31(D, Total), stepLength_tree31(StepLen), Total31 is Total * StepLen.

getScore_drugs_active_tree32(D, TreesToUse, 0.0) :- 32 > TreesToUse, !.
getScore_drugs_active_tree32(D, TreesToUse, Total32) :- drugs_active_tree32(D, Total), stepLength_tree32(StepLen), Total32 is Total * StepLen.

getScore_drugs_active_tree33(D, TreesToUse, 0.0) :- 33 > TreesToUse, !.
getScore_drugs_active_tree33(D, TreesToUse, Total33) :- drugs_active_tree33(D, Total), stepLength_tree33(StepLen), Total33 is Total * StepLen.

getScore_drugs_active_tree34(D, TreesToUse, 0.0) :- 34 > TreesToUse, !.
getScore_drugs_active_tree34(D, TreesToUse, Total34) :- drugs_active_tree34(D, Total), stepLength_tree34(StepLen), Total34 is Total * StepLen.

getScore_drugs_active_tree35(D, TreesToUse, 0.0) :- 35 > TreesToUse, !.
getScore_drugs_active_tree35(D, TreesToUse, Total35) :- drugs_active_tree35(D, Total), stepLength_tree35(StepLen), Total35 is Total * StepLen.

getScore_drugs_active_tree36(D, TreesToUse, 0.0) :- 36 > TreesToUse, !.
getScore_drugs_active_tree36(D, TreesToUse, Total36) :- drugs_active_tree36(D, Total), stepLength_tree36(StepLen), Total36 is Total * StepLen.

getScore_drugs_active_tree37(D, TreesToUse, 0.0) :- 37 > TreesToUse, !.
getScore_drugs_active_tree37(D, TreesToUse, Total37) :- drugs_active_tree37(D, Total), stepLength_tree37(StepLen), Total37 is Total * StepLen.

getScore_drugs_active_tree38(D, TreesToUse, 0.0) :- 38 > TreesToUse, !.
getScore_drugs_active_tree38(D, TreesToUse, Total38) :- drugs_active_tree38(D, Total), stepLength_tree38(StepLen), Total38 is Total * StepLen.

getScore_drugs_active_tree39(D, TreesToUse, 0.0) :- 39 > TreesToUse, !.
getScore_drugs_active_tree39(D, TreesToUse, Total39) :- drugs_active_tree39(D, Total), stepLength_tree39(StepLen), Total39 is Total * StepLen.

getScore_drugs_active_tree40(D, TreesToUse, 0.0) :- 40 > TreesToUse, !.
getScore_drugs_active_tree40(D, TreesToUse, Total40) :- drugs_active_tree40(D, Total), stepLength_tree40(StepLen), Total40 is Total * StepLen.

getScore_drugs_active_tree41(D, TreesToUse, 0.0) :- 41 > TreesToUse, !.
getScore_drugs_active_tree41(D, TreesToUse, Total41) :- drugs_active_tree41(D, Total), stepLength_tree41(StepLen), Total41 is Total * StepLen.

getScore_drugs_active_tree42(D, TreesToUse, 0.0) :- 42 > TreesToUse, !.
getScore_drugs_active_tree42(D, TreesToUse, Total42) :- drugs_active_tree42(D, Total), stepLength_tree42(StepLen), Total42 is Total * StepLen.

getScore_drugs_active_tree43(D, TreesToUse, 0.0) :- 43 > TreesToUse, !.
getScore_drugs_active_tree43(D, TreesToUse, Total43) :- drugs_active_tree43(D, Total), stepLength_tree43(StepLen), Total43 is Total * StepLen.

getScore_drugs_active_tree44(D, TreesToUse, 0.0) :- 44 > TreesToUse, !.
getScore_drugs_active_tree44(D, TreesToUse, Total44) :- drugs_active_tree44(D, Total), stepLength_tree44(StepLen), Total44 is Total * StepLen.

getScore_drugs_active_tree45(D, TreesToUse, 0.0) :- 45 > TreesToUse, !.
getScore_drugs_active_tree45(D, TreesToUse, Total45) :- drugs_active_tree45(D, Total), stepLength_tree45(StepLen), Total45 is Total * StepLen.

getScore_drugs_active_tree46(D, TreesToUse, 0.0) :- 46 > TreesToUse, !.
getScore_drugs_active_tree46(D, TreesToUse, Total46) :- drugs_active_tree46(D, Total), stepLength_tree46(StepLen), Total46 is Total * StepLen.

getScore_drugs_active_tree47(D, TreesToUse, 0.0) :- 47 > TreesToUse, !.
getScore_drugs_active_tree47(D, TreesToUse, Total47) :- drugs_active_tree47(D, Total), stepLength_tree47(StepLen), Total47 is Total * StepLen.

getScore_drugs_active_tree48(D, TreesToUse, 0.0) :- 48 > TreesToUse, !.
getScore_drugs_active_tree48(D, TreesToUse, Total48) :- drugs_active_tree48(D, Total), stepLength_tree48(StepLen), Total48 is Total * StepLen.

getScore_drugs_active_tree49(D, TreesToUse, 0.0) :- 49 > TreesToUse, !.
getScore_drugs_active_tree49(D, TreesToUse, Total49) :- drugs_active_tree49(D, Total), stepLength_tree49(StepLen), Total49 is Total * StepLen.

getScore_drugs_active_tree50(D, TreesToUse, 0.0) :- 50 > TreesToUse, !.
getScore_drugs_active_tree50(D, TreesToUse, Total50) :- drugs_active_tree50(D, Total), stepLength_tree50(StepLen), Total50 is Total * StepLen.

flattenedLiteralsInThisSetOfTrees(0, []).
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:555.8248456070658
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 10 positive seeds: 796 2493 2495 4964 4989 6115 7128 7225 7554 7777
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = drugs_active(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  drugs_active(_).  [covers 8,351.0/8,351.0 pos, 0.0/0.0 neg]
% Most-general root: drugs_active(_).  [covers 8,351.0/8,351.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'drugs_active(_).  [covers 8,351.0/8,351.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _).  [covers 8,351.0/8,351.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_inda(A, _).  [covers 8,351.0/8,351.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_logp(A, _).  [covers 8,351.0/8,351.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _).  [covers 8,351.0/8,351.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_ind1(A, _).  [covers 8,351.0/8,351.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_inda(A, _).  [covers 8,351.0/8,351.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_logp(A, _).  [covers 8,351.0/8,351.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_ind1(A, _), drugs_lumo(A, _).  [covers 8,351.0/8,351.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_inda(A, _).  [covers 8,351.0/8,351.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_ind1(A, _).  [covers 8,351.0/8,351.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_logp(A, _).  [covers 8,351.0/8,351.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_inda(A, _), drugs_lumo(A, _).  [covers 8,351.0/8,351.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_logp(A, _).  [covers 8,351.0/8,351.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_ind1(A, _).  [covers 8,351.0/8,351.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_inda(A, _).  [covers 8,351.0/8,351.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_logp(A, _), drugs_lumo(A, _).  [covers 8,351.0/8,351.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'drugs_active(A) :- drugs_lumo(A, _).  [covers 8,351.0/8,351.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_ind1(A, _).  [covers 8,351.0/8,351.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_inda(A, _).  [covers 8,351.0/8,351.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  drugs_active(A) :- drugs_lumo(A, _), drugs_logp(A, _).  [covers 8,351.0/8,351.0 pos, 0.0/0.0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree Combined @ 9:48:12 10/6/20.  [Using 9,702,448 memory cells.]  %%%%%


% FOR drugs_active(A):
%   return 0;  // std dev = 23.576, 8,351.000 (wgt'ed) examples reached here.  /* #neg=5,551 #pos=2,800 */


% Clauses:

drugs_active(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_drugs_active(underscore, 0) :-  /* #neg=5,551 #pos=2,800 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

% Time taken to learn model for 'drugs_active': 21.061 seconds.
% Saving model in: train/models/bRDNs/drugs_active.model
cached groundings hit: 0
Misses: 0

% Total learning time (50 trees): 24.646 seconds.
